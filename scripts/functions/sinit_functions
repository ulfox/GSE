#!/bin/bash

# CALL SUBSHELL
_subshell() {
	echo -e "\e[33mCalling bash subshell\e[0m"
	sleep 2
	echo 'echo -e "\e[33mInside Subshell\e[0m"' >> /root/.bashrc
	echo 'echo -e "\e[33mExit to return back to parent\e[0m"' >> /root/.bashrc
	(clear; exec /bin/bash;)
	sed -i "/Inside Subshell/d" "/root/.bashrc"
	sed -i "/Exit to return back to parent/d" "/root/.bashrc"
	echo -e "\e[33mYou are back to parent\e[0m"
}

parameters_check() {
	if [[ -n $(echo "$@" | grep '\--force-new') && -n $(echo "$@" | grep '\--lawful-good') ]]; then
		inspector "Warning: --force-new suppresses --lawful-good"
		sleep 2
	fi

	if [[ -n $(echo "$@" | grep '\--lawful-good') && -n $(echo "$@" | grep '\--enforce') ]]; then
		inspector "Warning: --lawful-good suppresses --enforce"
		sleep 2
	fi

	if [[ -n $(echo "$@" | grep '\--force-new') && -n $(echo "$@" | grep '\--keep') ]]; then
		die "Warning: --force-new suppresses --keep. This combination is know to give unexpected results."
	fi

	if [[ -n $(echo "$@" | grep '\--health-check') && "$#" != 1 ]]; then
		die "Warning: --health-check unknown parameters $2"
	fi

	if [[ -n $(echo "$@" | grep '\--replace-new') && "$#" != 1 ]]; then
		die "Warning: --replace-new: unknown parameters $2"
	fi

	if [[ -z $(echo "$@" | grep '\--build-minimal') &&  -n $(echo "$@" | grep 'gkernel') ]]; then
		inspector "Warning: --build-minimal suppresses kernel build"
		sleep 2
	fi

	if [[ -z $(echo "$@" | grep '\--build-minimal') &&  -n $(echo "$@" | grep 'ginitrd') ]]; then
		inspector "Warning: --build-minimal suppresses kernel initramfs"
		sleep 2
	fi

	if [[ -z $(echo "$@" | grep '\--build-minimal') &&  -n $(echo "$@" | grep 'ginst') ]]; then
		inspector "Warning: --build-minimal suppresses custom package installation"
		sleep 2
	fi
}

die() {
	echo -e "[\e[31m$@\e[0m]" 1>&2 ; exit 1
}

inspector() {
	echo -e "\e[33m$*\e[0m" 1>&2
}

pass() {
	echo -e "[\e[34mDone\e[0m]"
}

print_inf_f() {
	clear
	echo -e "[\e[31mFATAL\e[0m]"
	echo -e "\e[31mIf this message is printed while using the Maim Menu\e[0m"
	echo -e "\e[31mThat means essential files are altered or something bad is happening.\e[0m"
	echo
	echo -e "\e[31mPlease run a health-check from the ~Main Menu~ and a Version check first.\e[0m"
	echo -e "\e[31mIf you see this again after the health/version check, please submit a bug report\e[0m"
	echo -e "\e[31mand stop using the program, or data loss may occur.\e[0m"
	echo
	echo -e "\e[31mExiting...\e[0m"
	exit 1
}

repeat_part_f() {
	while true; do
		echo -e "\e[33mPart $1: Has been completed\e[0m"
		echo "Run again? Y/N: "
		read -rp "Input :: <= " YN
		case "${YN}" in
			[yN])
				RPPVAR=0
				return 0;;
			[nN])
				RPPVAR=9
				return 1;;
		esac
	done
}

help_f() {
	echo "Gentoo Stateless Environment, version: ${GSEVER}"
	echo "Distributed under the GNU General Public License, V2"
	echo "usage: gse [OPTIONS] / "
	echo
	echo "-fe, 	--fetch-new"
	echo "-fcn,	--force-new"
	echo "-lg,	--lawful-good"
	echo "-ef, 	--enforce=x"
	echo "-h, 	--help"
	echo "-k, 	--keep"
	echo "-hc, 	--health-check"
	echo "-rpn,	--replace-new"
	echo "-nk, 	--no-kernel"
	echo "-ni, 	--no-initramfs"
	echo "-bc, 	--build-controller"
	echo "-bm, 	--build-minimal"
	echo
}

_callying_catalyst(){
	echo -e "\e[34mCalling catalyst\e[0m"
	source "${CWORKDIR}/scripts/functions/init_stage3_seq" "$@" \
	&& sinit_flow_monitor "CATALYST" || die "Calling catalyst failed"
}

_extracting_catalyst() {
	CATDIR=$(grep storedir "${CCONFDIR}/system/catalyst/catalyst.conf" \
	| sed '/^#/ d' | awk -F '=' '{ print $2 }' | sed  -e "s_\"__g") \
	&& SNAPSHOTNAME="$(grep 'snapshot:' "${CCONFDIR}/system/catalyst/stage1.spec" \
	| sed '/^#/ d' | sed '/^\s*$/d' | awk -F ' ' '{ print $2 }' | sed  -e "s_\"__g")" \
	&& TARGETPATH="$(grep 'source_subpath' "${CCONFDIR}/system/catalyst/stage3.spec" \
	| sed '/^#/ d' | awk -F ' ' '{ print $2 }' | sed  -e "s_\"__g" | awk -F '/' '{ print $1 }')" \
	&& TARGETSTAMP="$(grep 'version_stamp' "${CCONFDIR}/system/catalyst/stage3.spec" \
	| sed '/^#/ d' | awk -F ' ' '{ print $2 }' | sed  -e "s_\"__g")" \
	&& _workdir_check "${CATDIR}/builds/${TARGETPATH}/stage3-${ARCH}-${TARGETSTAMP}.tar.bz2" \
	"${CDISTDIR}/workdir-catalyst" \
	"${CATDIR}/snapshots/portage-${SNAPSHOTNAME}.tar.bz2" "$@" \
	&& sinit_flow_monitor "EXTRACTION"
}

_repeat_subpart() {
	while true; do
		echo -e "\e[33m$1: Has been $2\e[0m"
		if [[ -n $(echo "$@" | grep '\--force-new') || -n $(echo "$@" | grep '\--force') ]]; then
			:
		else
			echo "Run again? Y/N: "
			read -rp "Input :: <= " YN
			case "${YN}" in
				[yN])
					RPSRVAR=0
					return 0;;
				[nN])
					RPSRVAR=9
					return 1;;
			esac
		fi
	done
}

sinit_flow_monitor() {
	# PROCESS FLOW TWEAKER DURING ALL BUT CHROOT STAGE. DO NOT EDIT THIS FILE!
	case "$1" in
		EXTRACTION)
			sed -i -e 's/EXTRACTION=0/EXTRACTION=1/g' "${CLOCALLG}/sinprog"
			sed -i -e 's/PARTA=0/PARTA=1/g' "${CLOCALLG}/sinprog";;
		RESET)
			sed -i -e 's/1/0/g' "${CLOCALLG}/sinprog";;
		PARTA)
			sed -i -e 's/PARTA=0/PARTA=1/g' "${CLOCALLG}/sinprog";;
		PARTB)
			sed -i -e 's/PARTB=0/PARTA=1/g' "${CLOCALLG}/sinprog";;
		CATALYST)
			sed -i -e 's/CATALYST=0/CATALYST=1/g' "${CLOCALLG}/sinprog";;
		PRECOMP)
			sed -i -e 's/PRECOMP=0/PRECOMP=1/g' "${CLOCALLG}/sinprog"
			sed -i -e 's/PARTA=0/PARTA=1/g' "${CLOCALLG}/sinprog";;
		RDEP)
			sed -i -e 's/RDEP=0/RDEP=1/g' "${CLOCALLG}/sinprog";;
		dn)
			;;
	esac
}

# RDEP CHECK
_dependencies_check() {
	if [[ "${CREL}" == "Gentoo" ]]; then
		echo -e "\e[33mHost system:\e[0m \e[35m${CREL}\e[0m"
		echo -e "\e[33mBefore you begin, it is strongly recommended to make a\e[0m \e[35mruntime dependency\e[0m \e[33mcheck on the host machine\e[0m"
		echo -e "\e[33mThis check is a simple\e[0m \e[35meix\e[0m \e[33m--installed foo check, which will be very fast and also verify\e[0m"
		echo -e "\e[33mthat during the process, nothing unexpected will occur\e[0m"
		echo -e "\e[33mIf\e[0m \e[35meix\e[0m \e[33mis not installed, do no worry, it will get installed\e[0m"
		echo
		while true; do
			echo -e "\e[33mCheck dependencies? Y/N: \e[0m"
			read -rp "Input :: <= " YN
			case "${YN}" in
				[yY])
					echo -e "\e[34mChecking for dependencies\e[0m"
					_lcreq 1 || die
					sinit_flow_monitor "RDEP"
					break;;
				[nN])
					echo "If you have not run a dependency check before, please abort"
					for i in {1..0}; do
   						sleep 1
   						printf "\r $i"
					done
					break;;
			esac
		done
		unset YN
	else
		echo -e "\e[33mHost system:\e[0m \e[33m${CREL}\e[0m"
		echo -e "\e[33mBefore you begin, it is strongly recommended to make a\e[0m \e[35mruntime dependency\e[0m \e[33mcheck on the host machine\e[0m"
		echo -e "\e[33mIf the all runtime dependencies are located, the process will continue, otherwise this window will exit. and expect you to manually install them\e[0m"
		echo -e "\e[33mSince only Gentoo is officially upported, it is expected to manually install any missing dependencies\e[0m"
		while true; do
			echo "Check dependencies? Y/N: "
			read -rp "Input :: <= " YN
			case "${YN:-n}" in
				[yY])
					echo -e "\e[34mChecking for dependencies\e[0m"
					_lcreq 2 die
					break;;
				[nN])
					echo "If you have not run a dependency check before, please abort"
					for i in {1..0}; do
   						sleep 1
   						printf "\r $i"
					done
					break;;
			esac
		done
	fi
unset YN
}

_pseudo_check_purge(){
	[[ -n "$(grep "dist.d/workdir-" "/proc/mounts" | awk -F ' ' '{ print $2 }')" ]] \
	&& while true; do
		while read -r i; do
			umount -l "$i"/* >/dev/null 2>&1 >/dev/null 2>&1
			umount -l "$i" >/dev/null 2>&1 >/dev/null 2>&1
		done < <(grep 'dist.d/workdir-' "/proc/mounts" | awk -F ' ' '{ print $2 }')
		
		[[ -z $(grep "dist.d/workdir-" "/proc/mounts" | awk -F ' ' '{ print $2 }') ]] \
		&& break
	done

	if [[ -n "$@" && -z "$(cat /proc/mounts | grep "workdir-$2")" ]]; then
		rm -rf "$1"
	else
		print_inf_f
	fi
}

_fundamentals() {
	# CHECK FOR RUNTIME DEPENDENCIES
	if [[ "$(awk -F '=' '/RDEP/{ print $2 }' <"${CLOCALLG}/sinprog")" == 0 ]]; then
		if [[ -n $(echo "$@" | grep '\--force-new') ]]; then
			:
		else
			_dependencies_check
		fi
	fi
	
	# CHECK IF THERE IS ANY WORK DONE
	if [[ -n $(echo "$@" | grep '\--force-new') || -n $(echo "$@" | grep '\--force') ]]; then
		_start_again "force_new" "$1"
	else
		if [[ "$(awk -F '=' '/PARTA/{ print $2 }' <"${CLOCALLG}/sinprog")" == 1 ]]; then
			_start_again "ask_new" "$1"
		fi
	fi
	
	clear
	echo "============================================================================"
	echo -e "\e[35mPART:A Fundamentals\e[0m"
	echo "============================================================================"
}

_start_again() {
	# PROMPT TO CONTINUE OR START ANEW
	if [[ "$1" == "ask_new" ]]; then
		while true; do
			clear; echo -e "\e[33mDo you want to continue from last time?\e[0m"
			echo -e "\e[33mIf you choose\e[0m \e[31mSTART NEW\e[0m\e[33m, workdir will be\e[0m \e[31mpurged\e[0m"
			echo -e "\e[33mAnswer Yes or START NEW: \e[0m"
			read -p "Input :: <= " YN
			echo 
			case "${YN:-n}" in
				[Yy][eE][sS]|[yY])
					break;;
				"START NEW")
					echo -e "\e[31mPurging...\e[0m" 
					_pseudo_check_purge "$2" \
					&& sinit_flow_monitor "RESET" && sed -i -e 's/1/0/g' "${CWORKDIR}/scripts/chroot_scripts/chsinprog"; break;;
				* ) echo "Wrong answer";;
			esac
		done
	elif [[ "$1" == "force_new" ]]; then
		echo -e "\e[31mForce new is active!\e[0m"
		echo -e "\e[31mPurging workdir...\e[0m" 
		_pseudo_check_purge "$2" \
		&& sinit_flow_monitor "RESET" && sed -i -e 's/1/0/g' "${CWORKDIR}/scripts/chroot_scripts/chsinprog"
	fi
	unset YN
}

_extract_tarball() {
	[[ -z "$@" && -d "$2" ]] && die "Wrong Parameters"
	mkdir -p "$2"

	echo -e "\e[34mExtracting tarball\e[0m"
	if tar xvjpf "$1" -C "$2" --xattrs --numeric-owner >/dev/null 2>&1; then
		echo -e "[\e[32m*\e[0m] Extracted"
		if [[ -n "$(echo "$@" | grep catalyst)" ]]; then
			echo -e "\e[34mExtracting portage\e[0m"
			tar xvjpf "$3" --xattrs --numeric-owner -C "$2/usr/" >/dev/null 2>&1
			echo -e "[\e[32m*\e[0m] Extracted"
		else
			die "Extracting portage FAILED"
		fi
	else
		die "Extracting tarball FAILED"
	fi
}

_workdir_check() {
	[[ -z "$@" && -d "$2" ]] && die "Wrong Parameters"
	if [[ -n $(echo "$@" | grep '\--force-new') || -n $(echo "$@" | grep '\--force' | grep 'gextr') ]]; then
		echo "This may take some time"
		echo "Purging..."
		_pseudo_check_purge "$2"
		_extract_tarball "$@"
	else
		if [[ -d "$2" ]]; then
			while true; do
				echo -e "Seems that there already has been done some work at the \e[34mbuilderdir\e[0m"
				echo "You could either continue from where you left, or backup/purge then start anew"
				echo -e "Give one of: \e[32mCONTINUE\e[0m/\e[34mOLD\e[0m/\e[31mPURGE\e[0m "
				read -rp "Input :: <= " ANS
				case $ANS in
					OLD)
						echo "Backing up..."
						mv "$2" "$2.old"
						_extract_tarball "$@"
						break;;
					PURGE)
						echo "This may take some time"
						echo "Purging..."
						_pseudo_check_purge "$2"
						_extract_tarball "$@"
						break;;
					CONTINUE)
						break;;
				esac
			done
		else
			_extract_tarball "$@"
		fi
	fi
}

_am_i_root() {
	if [[ "$1" != "0" ]]
	then
		echo -e "\e[31mThis operation requires root privileges\e[0m"
		echo "Returning back..."
		sleep 2
		BACKTO="MM"
		return 1
	fi
	return 0
}

_export_latest() {
	export GENTOOKEY="$(lynx -dump ${SIGNING_KEY} |  grep "(4096-bit RSA)" | head -1 | awk -F '(' '{ print $1}')"
	export "GENTOOKEY"
	export GENTOOLATEST="$DIST/$(wget -q -O- "${DIST}/latest-stage3-$ARCH.txt" | tail -n 1 | awk -F ' ' '{ print $1 }')"
	export STAGE3TB=$(wget -q -O- "${DIST}/latest-stage3-$ARCH.txt" | tail -n 1 | awk -F ' ' '{ print $1 }' | awk -F '/' '{ print $2 }')
	export GENTOOLATESTASC="$DIST/$(wget -q -O- "${DIST}/latest-stage3-$ARCH.txt" | tail -n 1 | awk -F ' ' '{ print $1 }').DIGESTS.asc"
}

_gentoo_key() {
	[[ -z "${GENTOOKEY}" ]] && die "Wrong Parameters" && return 1
	gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys >/dev/null 2>&1 ${GENTOOKEY} \
	&& echo -e "[\e[32m*\e[0m]\e[32m Fetching Key\e[0m" \
	|| { echo -e "[\e[31m*\e[0m]\e[31m Fetching Key\e[0m"; return 1; }
}

_get_latest() {
	[[ -z "${GENTOOLATEST}" || -z "${GENTOOLATESTASC}" ]] && die "Wrong Parameters" && return 1
	mkdir -p "${CDISTDIR}/dists" \
	&& echo -e "[\e[32m*\e[0m] Fetching \e[34m${STAGE3TB}\e[0m"
	if [[ -n $(echo "$@" | grep '\--fetch-new') || -n $(echo "$@" | grep '\-fn') ]]; then
		rm -f "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2" >/dev/null 2>&1
		rm -f "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2.DIGESTS.asc" >/dev/null 2>&1
		rm -f "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2.DIGESTS" >/dev/null 2>&1
		wget -c -O "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2" "${GENTOOLATEST}" >/dev/null 2>&1 \
		&& echo "${STAGE3TB}" > "${CDISTDIR}/dists/latest.info" \
		&& pass || die "FAILED"
	else
		wget -c -O "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2" "${GENTOOLATEST}" \
		&& echo "${STAGE3TB}" > "${CDISTDIR}/dists/latest.info" \
		&& pass || die "FAILED"
	fi
	wget -c -O "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2.DIGESTS.asc" "${GENTOOLATESTASC}" >/dev/null 2>&1 \
	&& echo -e "[\e[32m*\e[0m] Fetching \e[34m${GENTOOLATEST}\e[0m" \
	|| { echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Fetching \e[34m${GENTOOLATEST}\e[0m"; exit 1; }

	wget -c -O "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2.DIGESTS" "${GENTOOLATEST}.DIGESTS" >/dev/null 2>&1 \
	&& echo -e "[\e[32m*\e[0m] Fetching \e[34m${GENTOOLATEST}.DIGESTS\e[0m" \
	|| { echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Fetching $\e[34m${GENTOOLATEST}.DIGESTS\e[0m"; exit 1; }
}

_verify_download() {
	gpg --verify "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2.DIGESTS.asc" >/dev/null 2>&1 \
	&& echo -e "[\e[32m*\e[0m] Verifying \e[35mcryptographic signature\e[0m" \
	|| { echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Verifying \e[31mcryptographic signature\e[0m"; exit 1; }

	[[ $(grep -A 1 -i sha512 "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2.DIGESTS.asc" | head -n 2 | grep stage3 | awk -F ' ' '{ print $1 }') \
	== $(sha512sum "${CDISTDIR}/dists/stage3-${ARCH}-latest.tar.bz2" |  awk -F ' ' '{ print $1 }') ]] \
	&& echo -e "[\e[32m*\e[0m] Verifying \e[35msha512sums\e[0m" \
	|| { echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Verifying \e[31msha512sums\e[0m"; exit 1; }
}

_fetch_new() {
	# CHECK FOR THE POSITIONAL PARAMETERS AND BAILOUT IF THEY ARE MISSING
	[[ -z "$@" ]] && die "Wrong parameters"
	if [[ -n $(echo "$@" | grep '\--force-new') || -n $(echo "$@" | grep '\--force' | grep 'gseed') ]]; then
		echo -e "\e[33mSearching for tarball...\e[0m"
		_export_latest
		# GET LATEST STAGE3 TARBALL, .DIGEST && .DIGEST.asc
		local_stage3="$(cat "${CDISTDIR}/dists/latest.info")"
		if [[ "${local_stage3}" == "${STAGE3TB}" ]]; then
			echo -e "[\e[32m*\e[0m] Latest stage3 is already present locally"
		else
			# FETCH THE KEYS FOR THE CRYPTOGRAPHIC AUTHENTICATION
			_gentoo_key
			# GET LATEST STAGE3 TARBALL, .DIGEST && .DIGEST.asc
			_get_latest "$@"
			# VERIFY THE AUTHENTICATION OF THE DOWNLOADED FILES
			_verify_download
		fi
	else
		echo -e "\e[33mSearching for tarball...\e[0m"
		if [[ -n $(echo "$@" | grep '\--fetch-new') || -n $(echo "$@" | grep '\-fn') ]]; then
			_export_latest
			# FETCH THE KEYS FOR THE CRYPTOGRAPHIC AUTHENTICATION
			_gentoo_key
			# GET LATEST STAGE3 TARBALL, .DIGEST && .DIGEST.asc
			_get_latest "$@"
			# VERIFY THE AUTHENTICATION OF THE DOWNLOADED FILES
			_verify_download
		else
			_export_latest
			# GET LATEST STAGE3 TARBALL, .DIGEST && .DIGEST.asc
			local_stage3="$(cat "${CDISTDIR}/dists/latest.info")"
			if [[ "${local_stage3}" == "${STAGE3TB}" ]]; then
				echo -e "[\e[32m*\e[0m] Latest stage3 is already present locally"
			else
				# FETCH THE KEYS FOR THE CRYPTOGRAPHIC AUTHENTICATION
				_gentoo_key
				# GET LATEST STAGE3 TARBALL, .DIGEST && .DIGEST.asc
				_get_latest "$@"
				# VERIFY THE AUTHENTICATION OF THE DOWNLOADED FILES
				_verify_download
			fi
		fi
	fi
}

_unmount() {
	[[ -n "$(grep "dist.d/workdir-"$2 "/proc/mounts" | awk -F ' ' '{ print $2 }')" ]] \
	&& while true; do
		while read -r i; do
			umount -l "$i"/* >/dev/null 2>&1 >/dev/null 2>&1
			umount -l "$i" >/dev/null 2>&1 >/dev/null 2>&1
		done < <(grep 'dist.d/workdir-' "/proc/mounts" | awk -F ' ' '{ print $2 }')
		
		[[ -z $(grep "dist.d/workdir-"$2 "/proc/mounts" | awk -F ' ' '{ print $2 }') ]] \
		&& break
	done
}

_mount_dev_sys() {
	[[ -z "$@" ]] && print_inf_f
	mount --rbind /dev "$1/$2" \
	&& mount --make-rslave "$1/$2" \
	&& echo -e "[\e[32m*\e[0m] Mounting $2" \
	|| { echo -e "[\e[31*\e[0m] Mounting $2"; die "Failed"; }
}

_mount_proc() {
	[[ -z "$@" ]] && print_inf_f 
	mount -t proc /proc "$1/proc" \
	&& echo -e "[\e[32m*\e[0m] Mounting proc" \
	|| { echo -e "[\e[31m*\e[0m] Mounting proc"; die "Failed"; }
}

_prepare_chroot() {
	[[ -z "$@" ]] && print_inf_f

	cp -L /etc/resolv.conf "$1/etc/" || die "Failed"

	if [[ -n $(echo "$@" | grep 'catalyst') ]]; then
		# CHECK IF PSEUDOS ARE MOUNTED
		if [[ -n $(cat /proc/mounts | grep 'dist.d/workdir-catalyst' | awk -F ' ' '{ print $1 }') ]]; then
			echo -e "\e[31mPseudos possibly mounted at target directory\e[0m"
			echo -e "\e[33mResolving the issue...\e[0m"
			_unmount "catalyst"
		fi
		echo -e "\e[34mMounting pseudo\e[0m"
		[[ -z $(grep 'dist.d/workdir-catalyst' /proc/mounts | awk -F ' ' '{ print $1 }') ]] \
		&& _mount_proc "$1"
	elif [[ -n $(echo "$@" | grep 'precomp') ]]; then
		if [[ -n $(cat /proc/mounts | grep 'dist.d/workdir-precomp' | awk -F ' ' '{ print $1 }') ]]; then
			echo -e "\e[31mPseudos possibly mounted at target directory\e[0m"
			echo -e "\e[33mResolving the issue...\e[0m"
			_unmount "precomp"
		fi
		echo -e "\e[34mMounting pseudo\e[0m"
		[[ -z $(grep 'dist.d/workdir-precomp' /proc/mounts | awk -F ' ' '{ print $1 }') ]] \
		&& _mount_proc "$1"
	fi \
	&& _dev_sys "$1" "dev" \
	&& _mount_dev_sys "$1" "sys" \
	|| { echo -e "[\e[31m*\e[0m] Something went wrong" && die "Failed"; }

	mkdir -p "$1/sinit.d"

	[[ ! -e "$1/sinit.d/chsinprog" ]] && rsync -aAXr "${CWORKDIR}/scripts/chroot_scripts/" "$1/sinit.d/" >/dev/null 2>&1 \
	|| rsync -aAXr --exclude="chsinprog" "${CWORKDIR}/scripts/chroot_scripts/" "$1/sinit.d/" >/dev/null 2>&1 \
	&& rsync -aAXr "${CCONFDIR}/system/portage/" "$1/sinit.d/" >/dev/null 2>&1 \
	&& rsync -aAXr --exclude="portage" "${CCONFDIR}/system/" "$1/sinit.d/" >/dev/null 2>&1 \
	&& echo -e "[\e[32m*\e[0m] Copying \e[34mbuilder's\e[0m files to new system" \
	|| { echo -e "[\e[31m*\e[0m] Copying \e[34mbuilder's\e[0m files to new system"; die "Failed"; }

	# CREATE REPOS.CONF DIRECOTRY & AND COPY REPOS.CONF TO IT
	mkdir -p "$1/etc/portage/repos.conf"
	cp "$1/usr/share/portage/config/repos.conf" "$1/etc/portage/repos.conf/gentoo.conf"

	# Set local timezone if set
	if [[ -n $(cat /etc/timezone) ]]; then
		TIMEZONE=$(cat /etc/timezone)
		sed -i -e "s_TMZ_${TIMEZONE}_g" "$1/sinit.d/chinit.conf"
		unset TIMEZONE
	fi

	echo -e "[\e[32m*\e[0m] Copying requested files"
	if [[ -n $(cat ${CCONFDIR}/system/inject_files | sed '/^#/ d' | sed '/^\s*$/d') ]]; then

		while read -r INJFL;do
			f1="$(echo $INJFL | awk -F ' ' '{ print $1 }')"
			f2="${BWORKDIR}/(echo $INJFL | awk -F ' ' '{ print $2 }')"
			echo "Copying $f1 to $f2"
			rsync -aAXPhrv "$f1" "$f2" >/dev/null 2>&1 \
			&& pass || { mapfile -t INJFLERR < <($INJFL | awk -F ' ' '{ print $1 }'); }
		done < <(cat "${CCONFDIR}/system/inject_files" | sed '/^#/ d' | sed '/^\s*$/d')
		unset INJFL

		if [[ -n "${INJFLERR}" ]]; then
			echo "Failed to copy the following packages: "
			echo "${INJFLERR[@]}"
			while true; do
				echo "You can list the failed files again, continue, request terminal or exit"
				echo "Please choose: LIST/CONTINUE/TERMINAL/EXIT"
				read -rp "Input :: <= " INJFLANS
				case "$INJFLANS" in
					LIST)
						clear; echo "${INJFLERR[@]}";;
					CONTINUE)
						while true; do
							echo "Are you sure? Y/N "
							read -p "Input :: <= " YN
							case $YN in
								[yY])
									echo "Proceeding"
									INJFLESC=0
									break;;
								[nN])
									INJFLESC=1
									;;
							esac
						done;;
					TERMINAL)
						_subshell
						INJFLESC=0;;
					EXIT)
						while true; do
							echo "Are you sure? Y/N "
							read -p "Input :: <= " YN
							case $YN in
								[yY])
									echo "Aborting..."
									exit 0;;
								[nN])
									INJFLESC=1
									break;;
							esac
						done;;
				esac
				[[ "$INJFLESC" == 0 ]] && break
			done
		fi
		unset YN
		unset INJFLESC
		unset INJFLANS
		unset INJFLERR
	else
		echo -e "[\e[32m*\e[0m] List empty"
	fi

	echo -e "\e[34mChrooting at new system\e[0m"
	sleep 2
	chroot "$1" "sinit.d/chroot_init" "$@" || { echo -e "[\e[31m*\e[0m] Chrooting configuration failed"; die; } \
	&& sinit_flow_monitor "PARTB"
}

_lcreq() {
	# THIS SCRIPT IS SOURCED AT THE BEGINING FOR CHECKING THE BUILDER'S RUNTIME DEPENDENCIES
	CRDPENDS=''
	_am_i_root_sub() {
		if [[ "$1" == "0" ]]; then
			return 0
		else
			return 1
		fi
	}

	case "$1" in
		1)
			[[ $(command -v eix) ]] \
			|| { echo -e "[\e[33m*\e[0m] \e[35mPlease install eix to proceed!\e[0m" \
			&& { _am_i_root_sub $UID && echo -e "[\e[32m*\e[0m] Root privileges found" \
			&& emerge -aq eix && echo -e "[\e[33m*\e[0m] \e[35mUpdating database\e[0m" \
			&& eix-sync -a >/dev/null 2>&1; } \
			|| { echo -e "[\e[31m*\e[0m] Could not get root privileges" \
			&& echo "Please resolve this issue and start again" && exit 1; }; }

			mapfile -t lreq < <(cat "${CLOCALLG}/loc_req" | sed '/^#/ d' | sed '/^\s*$/d')

			for i in "${lreq[@]}"; do
				sleep 0.1
				if eix --installed "$i" >/dev/null 2>&1; then
					echo -e "[\e[32m*\e[0m] Searching for \e[32m$i\e[0m"
				else
					echo -e "[\e[31m*\e[0m] Searching for $i"
					echo -e "[\e[33m*\e[0m] Attempting to resolve the missing dependency"
					_am_i_root $UID && echo -e "[\e[32m*\e[0m] Root privileges found" \
					&& emerge -aq "$i" \
					|| { echo -e "[\e[31m*\e[0m] Could not get root privileges" \
					&& echo "Please resolve this issue and start again" && exit 1; }
				fi
			done;;
		2)
			mapfile -t lreq < <(cat "${CLOCALLG}/nogloc_req" | sed '/^#/ d' | sed '/^\s*$/d')

			for i in "${lreq[@]}"; do
				sleep 0.1
				if command -v "$i" >/dev/null 2>&1; then
					echo -e "[\e[32m*\e[0m] Searching for \e[32m$i\e[0m"
				else
					echo -e "[\e[31m*\e[0m] Searching for $i"
					CRDPENDS=1
				fi
			done
			[[ "${CRDPENDS}" == 1 ]] && while true; do
			echo -e "\e[33mIf you think some of those dependencies are name missmatch or not important\e[0m"
			echo -e "\e[33mYou can choose to continue at your own ristk\e[0m"
			echo -e "\e[33mContinue? Y/N: "
			read -rp "Input :: <= " ANS
			case "${ANS}" in
				[yY])
					break;;
				[nN])
					echo "Exiting..." && sleep 1 && exit 1;;
			esac
		done
	esac
}
