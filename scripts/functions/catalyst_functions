#!/bin/bash


# OPTIONS MENU
opt_f() {
	echo -e "##################  \e[94m~~Snapshot~~\e[39m   #################"
	echo "##						 	  ##"
	echo -e "## [ \e[32mI\e[39m  ]	Fetch new	                  ##"
	echo -e "## [ \e[32mII\e[39m ]	Let me show you 		  ##"
	echo -e "## [ \e[32mIII\e[39m]	Try and find it please		  ##"
	echo -e "## [ \e[32mIV\e[39m ]	Where is my shell?		  ##"
	echo -e "## [ \e[32mV\e[39m  ]	Built new from portdir 		  ##"
	echo "##						 	  ##"
	echo "####################################################"
}

# EXPORT CATALYST DIRECTORIES
export_cat_dirs_f() {
	# STOREDIR
	export CATDIR=$(grep storedir "${CCONFDIR}/system/catalyst/catalyst.conf" \
	| sed '/^#/ d' | awk -F '=' '{ print $2 }' | sed  -e "s_\"__g")

	# PORTDIR
	export CATPORTDIR=$(grep portdir "${CCONFDIR}/system/catalyst/catalyst.conf" \
	| sed '/^#/ d' | awk -F '=' '{ print $2 }' | sed  -e "s_\"__g")

	# SNAPSHOT_CACHE
	export CATPORTCACHEDIR=$(grep "snapshot_cache" "${CCONFDIR}/system/catalyst/catalyst.conf" \
	| sed '/^#/ d' | awk -F '=' '{ print $2 }' | sed  -e "s_\"__g")

	# PORT_LOGDIR
	export CATLOGDIR=$(grep "port_logdir" "${CCONFDIR}/system/catalyst/catalyst.conf" \
	| sed '/^#/ d' | awk -F '=' '{ print $2 }' | sed  -e "s_\"__g")

	# DISTDIR
	export CATDISTDIR=$(grep "distdir" "${CCONFDIR}/system/catalyst/catalyst.conf" \
	| sed '/^#/ d' | awk -F '=' '{ print $2 }' | sed  -e "s_\"__g")
}

# CREATE CATALYST DIRECTORIES
create_cata_dirs_f() {
	mkdir -p "${CATDIR}"
	mkdir -p "${CATPORTDIR}"
	mkdir -p "${CATPORTCACHEDIR}"
	mkdir -p "${CATLOGDIR}"
	mkdir -p "${CATDISTDIR}"
	mkdir -p "${CATDIR}/builds/default"
	mkdir -p "${CATDIR}/snapshots"
}

# CALL CATALYST TO CREATE THE SNAPSHOT
call_cata_f() {
	echo -e "\e[34mCreating snapshot...\e[0m"
	catalyst -s "${SNAPSHOTNAME}" && { BRKVAR=0 && return 0; }|| { BRKVAR=1 && return 1; }
}

# BUILD PORTAGE
build_port() {
	echo -e "\e[35mIt is strongly recommended to update your portdir first\e[0m"
	while true; do
		read -rp "Do you wish to update? Y/N " YN
		case "${YN:-n}" in
			[yY][eE][sS]|[yY])
				echo -e "\e[32mUpdating...\e[0m"
				{
				{ eix-sync >/dev/null 2>&1 \
				&& echo -e "\e[32mDone\e[0m" && call_cata_f; } \
				|| { emerge --sync >/dev/null 2>&1 \
				&& echo -e "\e[32mDone\e[0m" && call_cata_f; } \
				|| { emerge-webrsync >/dev/null 2>&1 \
				&& echo -e "\e[32mDone\e[0m" && call_cata_f; }
				} \
				|| { echo -e "\e[31mUpdate failed, build without update?\e[0m"
				while true; do
					read -rp "Answer: YN " ANS
					case "${ANS:-n}" in
						[yY])
							echo -e "\e[34mProceeding\e[0m"
							call_cata_f
							break;;
						[nN])
							echo -e "\e[34mAborting...\e[0m"
							sleep 1
							BRKVAR=1
							return 0;;
					esac
				done; }
				break;;
			[nN][oO]|[nN])
				echo -e "\e[34mProceeding\e[0m"
				call_cata_f
				break;;
		esac
	done
}

# SUBTERMINAL
subterm_f() {
	echo -e "\e[33mCalling bash subshell\e[0m"
	sleep 2
	echo 'echo -e "\e[33mInside Subshell\e[0m"' >> /root/.bashrc
	echo "echo -e "Please copy your snapshot to ${CATDIR}/snapshots with name: portage-${SNAPSHOTNAME}.tar.bz2""
	echo 'echo -e "\e[33mExit to return back to parent\e[0m"' >> /root/.bashrc
	(clear; exec /bin/bash;)
	sed -i "/Inside Subshell/d" "/root/.bashrc"
	sed -i "/Exit to return back to parent/d" "/root/.bashrc"
	echo -e "\e[33mYou are back to parent\e[0m"
}

# EXPORT SPEC ENTRIES
tar_path_name_f() {
	TARGETPATH="$(grep 'source_subpath' "${CCONFDIR}/system/catalyst/stage$1.spec" \
	| sed '/^#/ d' | awk -F ' ' '{ print $2 }' | sed  -e "s_\"__g" | awk -F '/' '{ print $1 }')"

	TARGETNAME="$(grep 'source_subpath' "${CCONFDIR}/system/catalyst/stage$1.spec" \
	| sed '/^#/ d' | awk -F ' ' '{ print $2 }' | sed  -e "s_\"__g" | awk -F '/' '{ print $2 }')"

	TARGETSTAMP="$(grep 'version_stamp' "${CCONFDIR}/system/catalyst/stage$1.spec" \
	| sed '/^#/ d' | awk -F ' ' '{ print $2 }' | sed  -e "s_\"__g")"

	SNAPSHOTNAME="$(grep 'snapshot:' "${CCONFDIR}/system/catalyst/stage1.spec" \
	| sed '/^#/ d' | sed '/^\s*$/d' | awk -F ' ' '{ print $2 }' | sed  -e "s_\"__g")"
}


fetch_portage_f() {
echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Snapshot \e[31mverified\e[0m"
if [[ -e "${CATDIR}/portage-latest.tar.bz2" ]]; then
	echo -e "[\e[31m*\e[0m] Purging old snapshot" \
	&& rm -f "${CATDIR}/portage-latest.tar.bz2"
	# GETTING PORTAGE SNAPSHOT
else
	echo -e "[\e[31m*\e[0m] Local backup snapshot was not found!"
fi
	echo -e "[\e[32m*\e[0m] \e[34mGetting latest portage snapshot\e[0m" \
	&& wget -O "${CATDIR}/portage-latest.tar.bz2" \
	http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2 >/dev/null 2>&1 \
	&& print_inf 1 && return 0 || { print_inf 2; return 1; } 
}

verify_portage_f() {
	[[ $(grep portage  "${CATDIR}/portage-latest.tar.bz2.md5sum" | awk -F ' ' '{print $1}') \
	== $(md5sum "${CATDIR}/portage-latest.tar.bz2" |  awk -F ' ' '{ print $1 }') ]] \
	&& echo -e "[\e[32m*\e[0m] Verifying \e[35mmd5sums\e[0m" && return 0 \
	|| { echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Verifying \e[31mmd5sums\e[0m"; return 1; }
}

get_latest_portage_f() {
	# PORTAGE MD5SUM
	wget -O "${CATDIR}/portage-latest.tar.bz2.md5sum" \
	http://distfiles.gentoo.org/snapshots/portage-latest.tar.bz2.md5sum >/dev/null 2>&1 \
	&& echo -e "[\e[32m*\e[0m] \e[34mGetting md5sum\e[0m" \
	|| { echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: \e[34mGetting md5sum\e[0m" \
	&& return 1; }
	
	if verify_portage_f; then
		echo "Copying to ${CATDIR}/snapshots" \
		&& cp "${CATDIR}/portage-latest.tar.bz2" "${CATDIR}/snapshots/portage-${SNAPSHOTNAME}.tar.bz2" \
		&& cp "${CATDIR}/portage-latest.tar.bz2.md5sum" "${CATDIR}/snapshots/portage-${SNAPSHOTNAME}.tar.bz2.md5sum" \
		&& print_inf 1 && return 0 || { print_inf 2; return 1; }
	else
		fetch_portage_f \
		&& verify_portage_f \
		&& echo "Copying to ${CATDIR}/snapshots" \
		&& cp "${CATDIR}/portage-latest.tar.bz2" "${CATDIR}/snapshots/portage-${SNAPSHOTNAME}.tar.bz2" \
		&& cp "${CATDIR}/portage-latest.tar.bz2.md5sum" "${CATDIR}/snapshots/portage-${SNAPSHOTNAME}.tar.bz2.md5sum" \
		&& print_inf 1 && return 0 || { print_inf 2; return 1; }
	fi
}

# CHECK SNAPSHOT
chk_snap_f() {
[[ -z "$@" ]] && print_inf 4 && return 1
[[ $(du -sh "$1" | awk -F ' ' '{print $1}' | sed 's/[^0-9]*//g') -le 220 ]] \
&& [[ $(du -sh "$1" | awk -F ' ' '{print $1}' | sed 's/[^0-9]*//g') -ge 50 ]] \
|| return 1
}

# SEARCH FOR SNAPSHOTS
search_snap_f() {
mapfile -t ARRAYSNAP < <(find / -name "*portage*.tar.bz2")


for i in "${ARRAYSNAP[@]}"; do
	if [[ $(du -sh "$i" | awk -F ' ' '{print $1}' | sed 's/[^M]*//g') == M && -n $(echo "$i" | grep portage) ]]; then
		if chk_snap_f "$i"; then
			while true; do
				echo "$i"
				read -rp "Is this the snapshot? Y/N " YN
				case "${YN:-5}" in
					[yY][eE][sS]|[yY])
						echo -e "\e[34mCopying snapshot to ${CATDIR}/snapshots\e[0m"
						cp "$i" "${CATDIR}/snapshots/portage-${SNAPSHOTNAME}.tar.bz2"
						return 0
						ESCINNER=0
						break
						;;
					[nN][oO]|[nN])
						ESCINNER=1
						break;;
				esac
			done
			[[ "$ESCINNER" == 0 ]] && unset ESCINNER && break
		fi
	fi
done
return 1
unset YN
unset ESCINNER
unset ARRAYSNAP
}

stageX_f() {
	[[ -z "$@" ]] && print_inf 4 && return 1
	if [[ -e "$1" ]]; then
		# STAGE 2
		echo -e "\e[35mBuilding stage$2\e[0m"

		cat "${CCONFDIR}/system/catalyst/stage$2.spec" | sed '/^#/ d' | sed '/^\s*$/d' \
		> "${CATDIR}/.stage$2.spec"

		catalyst -c "${CCONFDIR}/system/catalyst/catalyst.conf" -f "${CATDIR}/.stage$2.spec" \
		&& print_inf 1 || { print_inf 2 && exit 1; }
	else
		echo -e "\e[31mCould not locate stage$2-${ARCH}-${TARGETSTAMP}.tar.bz2\e[0m"
		return 1
	fi
}

check_then_call_stageX_f() {
	[[ -z "$@" ]] && print_inf 4 && return 1
	if [[ -n $(echo $@ | grep '\--force-new') ]]; then
		stageX_f "$1" "$2"
	else
		if [[ -e "${CATDIR}/builds/${TARGETPATH}/stage$2-${ARCH}-${TARGETSTAMP}.tar.bz2" && -n $(echo "$@" | grep "s$2") ]]; then

			echo -e "\e[32mStage$2 located\e[0m"

			while read -p "Do you wish to build new? Y/N " ANS; do
				case $ANS in
					[yY])
						stageX_f "$1" "$2"
						break;;
					[nN])
						break;;
				esac
			done
		else
			stageX_f "$1" "$2"
		fi
	fi
}
