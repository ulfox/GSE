#!/bin/bash

LC_COLLATE=C

# MAIN BUILDER

# CHECK FOR THE POSITIONAL PARAMETERS AND BAILOUT IF THEY ARE MISSING
[[ -z "${DISTDIR}" ]] && print_inf 4 && return 1
echo -e "\e[34mChecking for dependencies\e[0m"
#lcreq || exit 1
echo -e "[\e[32m*\e[0m] \e[34mInitializing\e[0m"
sleep 0.5

# ALL ESSENTIAL VARIABLES FOR THE DOWNLOAD AND AUTHENTICATION PROCESS
source "${WORKDIR}/etc/gentoo.conf" >/dev/null 2>&1 && { echo -e "[\e[32m*\e[0m] \e[35mExporting variables\e[0m" ;} \
|| { echo -e "[\e[31m*\e[0m] \e[35mExporting variables\e[0m"; echo -e "[\e[31mAborting\e[0m..."; sleep 2; return 1; }

export GENTOOKEY="$(lynx -dump ${SIGNING_KEY} |  grep "(4096-bit RSA)" | head -1 | awk -F '(' '{ print $1}')"
export "GENTOOKEY"
export GENTOOLATEST="$DIST/$(wget -q -O- "${DIST}/latest-stage3-$ARCH.txt" | tail -n 1 | awk -F ' ' '{ print $1 }')"
export STAGE3TB=$(wget -q -O- "${DIST}/latest-stage3-$ARCH.txt" | tail -n 1 | awk -F ' ' '{ print $1 }' | awk -F '/' '{ print $2 }')
export GENTOOLATESTASC="$DIST/$(wget -q -O- "${DIST}/latest-stage3-$ARCH.txt" | tail -n 1 | awk -F ' ' '{ print $1 }').DIGESTS.asc"

# PROMPT TO CONTINUE OR START ANEW
if [[ "$(awk -F '=' '/KEY/{ print $2 }' <"${LOCALLG}/sinprog")" == 1 ]]; then
while true; do
clear; echo -e "\e[32mDo you want to continue from last time?\e[0m"
read -p "Answer Yes or START NEW: " yn
echo 
case ${yn} in
	[Yy][eE][sS]|[yY])
		break;;
	"START NEW")
		# CHECK IF THE PSEUDOS ARE MOUNTED, ATTEMPT TO UNMOUNT AND BAILOUT IF UNABLE TO
		[[ -n $(grep 'dist.d/stage3' /proc/mounts | awk -F ' ' '{ print $1 }') ]] \
		&& { umount -l "${DISTDIR}/${STAGE3TB}"/* >/dev/null 2>&1 && sleep 2 \
		&& umount -l "${DISTDIR}/${STAGE3TB}"/* >/dev/null 2>&1 \
		&& [[ -z $(grep 'dist.d/stage3' /proc/mounts | awk -F ' ' '{ print $1 }') ]] && exit 1; }

		# PURGE OLD WORK DIRECTORY. WORK DIRECTORY IS NOT WORKDIR
		rm -rf "${DISTDIR}/${STAGE3TB}"
		sinit_mon 5 && sed -i -e 's/1/0/g' "${WORKDIR}/scripts/chroot_scripts/chsinprog"; break;;
	* ) echo "Wrong answer";;
esac
done
fi

keep_out(){
# PART A FUNDAMENTALS
[[ "$(awk -F '=' '/PARTA/{ print $2 }' <"${LOCALLG}/sinprog")" == 0 ]] \
&& clear && echo -e "\e[35mPART:A Fundamentals\e[0m" && sleep 2

# FETCH THE KEYS FOR THE CRYPTOGRAPHIC AUTHENTICATION
 if [[ "$(awk -F '=' '/KEY/{ print $2 }' <"${LOCALLG}/sinprog")" == 0 ]]; then

[[ -z "${GENTOOKEY}" ]] && print_inf 4 && return 1

gpg --keyserver hkps.pool.sks-keyservers.net --recv-keys >/dev/null 2>&1 ${GENTOOKEY} \
&& echo -e "[\e[32m*\e[0m]\e[32m Fetching Key\e[0m" \
|| { echo -e "[\e[31m*\e[0m]\e[31m Fetching Key\e[0m"; return 1; }
sinit_mon 1
fi

# DOWNLOAD THE LATEST STAGE3 TARBALL TO ACT AS THE CATALYST'S SEED S3T
if [[ "$(awk -F '=' '/WGETST3/{ print $2 }' <"${LOCALLG}/sinprog")" == 0 ]]; then

[[ -z "${GENTOOLATEST}" || -z "${GENTOOLATESTASC}" ]] && print_inf 4 && return 1

mkdir -p "${DISTDIR}/${STAGE3TB}" "${DISTDIR}/dists"

if [[ ! -e "${DISTDIR}/dists/${STAGE3TB}" ]]; then
echo -e "[\e[32m*\e[0m] Getting \e[34m${STAGE3TB}\e[0m"
wget -c --progress=dot -P "${DISTDIR}/dists" "${GENTOOLATEST}" \
&& print_inf 1 || { print_inf 2; return 1; }
elif [[ -e "${DISTDIR}/dists/${STAGE3TB}" ]]; then
echo -e "[\e[32m*\e[0m] Located \e[34m${STAGE3TB}\e[0m"
fi

if [[ ! -e "${DISTDIR}/dists/${GENTOOLATESTASC}" ]]; then
wget -c --progress=dot -P "${DISTDIR}/dists" "${GENTOOLATESTASC}" >/dev/null 2>&1 \
&& echo -e "[\e[32m*\e[0m] Getting \e[34m${GENTOOLATEST}\e[0m" \
|| echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Getting \e[34m${GENTOOLATEST}\e[0m"
fi

if [[ ! -e "${DISTDIR}/dists/${GENTOOLATEST}.DIGESTS" ]]; then
wget -c --progress=dot -P "${DISTDIR}/dists" "${GENTOOLATEST}.DIGESTS" >/dev/null 2>&1 \
&& echo -e "[\e[32m*\e[0m] Getting \e[34m${GENTOOLATEST}.DIGESTS\e[0m" \
|| echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Getting $\e[34m${GENTOOLATEST}.DIGESTS\e[0m"
fi

sinit_mon 2
fi
unset WGETST3

# VERIFY THE AUTHENTICATION OF THE DOWNLOADED FILES
if [[ "$(awk -F '=' '/VERIFICATION/{ print $2 }' <"${LOCALLG}/sinprog")" == 0 ]]; then
gpg --verify "${DISTDIR}/dists/${STAGE3TB}.DIGESTS.asc" >/dev/null 2>&1 \
&& echo -e "[\e[32m*\e[0m] Verifying \e[35mcryptographic signature\e[0m" \
|| echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Verifying \e[31mcryptographic signature\e[0m"

[[ $(grep -A 1 -i sha512 "${DISTDIR}/dists/${STAGE3TB}.DIGESTS.asc" | head -n 2 |grep stage3 | awk -F ' ' '{ print $1 }') \
== $(sha512sum "${DISTDIR}/dists/${STAGE3TB}" |  awk -F ' ' '{ print $1 }') ]] && echo -e "[\e[32m*\e[0m] Verifying \e[35msha512sums\e[0m" \
|| echo -e "[\e[31m*\e[0m] \e[31mFAILD\e[0m: Verifying \e[31msha512sums\e[0m"
sinit_mon 3
fi
unset VERIFICATION
}
# CATALYST BEGINS HERE

echo -e "\e[34mCallling Catalyst\e[0m"
sleep 0.5

if init_stage3_seq; then
sinit_mon 7 && echo "CATALYST=0" > "${LOCALLG}/tborigin"
else
sinit_mon 8 && echo "CATALYST=1" > "${LOCALLG}/tborigin"
fi
unset CATADIR
unset CATPORTDIR
unset CATPORTCACHEDIR
unset CATLOGDIR
unset CATDISTDIR
# CATALYST ENDS HERE
exit
if cp "${CATADIR}/builds/defaults/stage3-${ARCH}-${GSE_VER}.tar.bz2"; then echo "Stage3 tarball built"; echo "Extracting"; fi

# Extract the tarball
if [[ "$(awk -F '=' '/EXTRACTION/{ print $2 }' < "${LOCALLG}/sinprog")" == 0 ]]; then
echo "Extracting tarball"
if [[ "$(awk -F '=' '/CATALYST/{ print $2 }' < "${LOCALLG}/sinprog")" == 0 ]]; then
tar xvjpf "${DISTDIR}/dists/catalyst/builds/defaults/stage3-${ARCH}-${GSE_VER}.tar.bz2" \
-C "${DISTDIR}/${STAGE3TB}" --xattrs --numeric-owner && echo -e "[\e[32m*\e[0m] ALL GOOD" \
|| echo -e "[\e[31m*\e[0m] AN ERROR OCCURRED"
else
tar xvjpf "${DISTDIR}/dists/${STAGE3TB}" -C "${DISTDIR}/${STAGE3TB}" --xattrs --numeric-owner \
&& echo -e "[\e[32m*\e[0m] ALL GOOD" \
|| echo -e "[\e[31m*\e[0m] AN ERROR OCCURRED"
sinit_mon 4
fi
unset EXTRACTION

# PART B
[[ "$(awk -F '=' '/PARTB/{ print $2 }' <"${LOCALLG}/sinprog")" == 0 ]] \
&& clear && echo -e "\e[35mPART:B Preparing to enter the new system\e[0m" && sleep 2

# Root check function
amiroot() {
	if [[ "$1" != "0" ]]
	then
		echo "This operation requires root privileges"
		echo "Returning back..."
		sleep 2
		BACKTO="MM"
		return 1
	fi
	return 0
}

amiroot "$UID"
sleep 1
echo -e "[\e[32m*\e[0m] Requesting root privileges"

cp -L /etc/resolv.conf "${DISTDIR}/${STAGE3TB}/etc/"

# Check if mounted
#cat /proc/mounts | grep 'dist.d/stage3' | awk -F ' ' '{ print $1 }'
if [[ -n $(cat /proc/mounts | grep 'dist.d/stage3' | awk -F ' ' '{ print $1 }') ]]; then
echo "Pseudos possibly mounted at target directory"
umount -l "${DISTDIR}/${STAGE3TB}/dev" >/dev/null 2>&1
umount -l "${DISTDIR}/${STAGE3TB}/proc" >/dev/null 2>&1
umount -l "${DISTDIR}/${STAGE3TB}/sys" >/dev/null 2>&1
umount -l "${DISTDIR}/${STAGE3TB}"/* >/dev/null 2>&1
sleep 2
fi

echo "Mounting pseudo"
[[ -z $(grep 'dist.d/stage3' /proc/mounts | awk -F ' ' '{ print $1 }') ]] \
&& { mount -t proc /proc "${DISTDIR}/${STAGE3TB}/proc" \
&& echo -e "[\e[32m*\e[0m] Mounting proc" \
|| { echo -e "[\e[31m*\e[0m] Mounting proc"; return 1; }

mount --rbind /dev "${DISTDIR}/${STAGE3TB}/dev" \
&& mount --make-rslave "${DISTDIR}/${STAGE3TB}/dev" \
&& echo -e "[\e[32m*\e[0m] Mounting dev" \
|| { echo -e "[\e[321*\e[0m] Mounting dev"; return 1; }

mount --rbind /sys "${DISTDIR}/${STAGE3TB}/sys" \
&& mount --make-rslave "${DISTDIR}/${STAGE3TB}/sys" \
&& echo -e "[\e[32m*\e[0m] Mounting sys" \
|| { echo -e "[\e[321*\e[0m] Mounting sys"; return 1; }; }

mkdir -p "${DISTDIR}/${STAGE3TB}/sinit.d"

rsync -avhPr "${WORKDIR}/scripts/chroot_scripts/" "${DISTDIR}/${STAGE3TB}/sinit.d/" >/dev/null 2>&1 \
&& rsync -a "${CONFDIR}/system/portage/make.conf" "${DISTDIR}/${STAGE3TB}/sinit.d/" >/dev/null 2>&1 \
&& rsync -a "${CONFDIR}/system/portage/package.use/sysbuild" "${DISTDIR}/${STAGE3TB}/sinit.d/" >/dev/null 2>&1 \
&& rsync -a --exclude="portage" "${CONFDIR}/system/" "${DISTDIR}/${STAGE3TB}/sinit.d/" >/dev/null 2>&1 \
&& echo -e "[\e[32m*\e[0m] Copying required files to new system" \
|| { echo -e "[\e[31m*\e[0m] Copying required files to new system"; return 1; }

# Create repos.conf dir & copy repos.conf to it
mkdir -p "${DISTDIR}/${STAGE3TB}/etc/portage/repos.conf"
cp "${DISTDIR}/${STAGE3TB}/usr/share/portage/config/repos.conf" "${DISTDIR}/${STAGE3TB}/etc/portage/repos.conf/gentoo.conf"

# Set local timezone if set
if [[ -n $(cat /etc/timezone) ]]; then
TIMEZONE=$(cat /etc/timezone)
sed -i -e "s_TMZ_${TIMEZONE}_g" "${DISTDIR}/${STAGE3TB}/sinit.d/init.conf"
unset TIMEZONE
fi

echo "Chrooting at new system"
sleep 2
chroot "${DISTDIR}/${STAGE3TB}" "sinit.d/chroot_init" || { echo -e "[\e[31m*\e[0m] Chrooting at new system"; return 1; }
sinit_mon 6

# TBU
exit

gpg --armor --export email > ${FINALDIST}/key.asc # THIS WILL BE ADDED TO THE HOSTS
gpg --detach-sign -o ${GSE_VER}.gpg ${FINALDIST}/${IMAGE}