#!/bin/bash

#
# THE MAIN CHROOT SCRIPT.
# ALL CONFIGURATIONS HAPPEN HERE OR ARE SOURCED FROM HERE
# PLEASE DO NOT MODIFY THIS FILE, BUT REFEREE AT CONFIGURATION SUBMENU
# IF YOU NEED TO ADD EXTRA FEATURES TO YOUR SYSTEM.
# 

if echo "${_flag_tty}" | grep -q 'sshd'; then
	LC_COLLATE="C"
	LC_ALL="en_US.UTF-8"
	LC_CTYPE="en_US.UTF-8"
fi

#trap ask_for_shell SIGINT

# ENVIROMENTAL ECHO FOR TESTING PHASE
echo "$@"

if echo "$@" | grep -q '_flag_verbose'; then
	emerge_opt="-v"
	_chroot_silence="2>&1 | tee -a LAST_ACTION"
elif echo "$@" | grep -q '_flag_quiet'; then
	_chroot_silence=">>LAST_ACTION 2>&1"
	emerge_opt="-q"
else
	emerge_opt=''
	_chroot_silence="2>&1 | tee -a LAST_ACTION"
fi

export emerge_opt
export _chroot_silence

_trap_sigs() {
	trap_var=0
	export trap_var
}

# EXPORT IMPORTANT VARIABLES BEFORE GOING ON
source /etc/profile && export PS1="( 'Part C: Preparing to bootstrap' ) $PS1"
export CHDIR="/sinit.d"
export PATH=${PATH}:${CHDIR}
source "${CHDIR}/chinit.conf" \
&& source "${CHDIR}/cfunctions" && source "${CHDIR}/coptions"|| die "Failed"
[[ ! -e "${CHDIR}/emergeresume" ]] && echo "#####" >> "${CHDIR}/emergeresume" \
|| sed -i "/#####/d" "${CHDIR}/emergeresume"

# INCLUDE LOG DATE
_log_date

# CHECK POSITIONAL PARAMETERS
inspector "$@"

# EXPORT ENFORCE SAVED ARGS
if [[ -e "${CHDIR}/array_args/enforce_args" ]]; then
	_enforce_args=()
	while read -r s; do
		_enforce_args+=("${s}")
	done < <(cat "${CHDIR}/array_args/enforce_args")
fi

# EXPORT LAWFUL SAVED ARGS
if [[ -e "${CHDIR}/array_args/lawful_args" ]]; then
	_lawful_args=()
	while read -r s; do
		_lawful_args+=("${s}")
	done < <(cat "${CHDIR}/array_args/lawful_args")
fi

# PART C BEGINS
_do_hs '\-gupdate' "before" "Part: Portage Update"
if _call_hook_points 'UPDATE' 'gupdate' 'Part: Portage Update' '_part_c' "$@"; then
	_monitor_chroot_flow "UPDATE"
else
	die "Part: Update Failed"
fi
_do_hs '\+gupdate' "after" "Part: Portage Update"

# EXPORT FEATURES & DISTCC, CCACHE OPTIONS
if echo "${_lawful_args[@]}" | grep -q "gupdate" || [[ -z "${emerge_mode}" ]]; then
	_edc_exp "$@"
fi

# PART PORTAGE, PROFILE AND FEATURES UPDATE
_do_hs '\-gportage' "before" "Part: Portage"
if _call_hook_points 'PORTAGE' 'gportage' 'Part: Portage' 'part_portage' "$@"; then
	_monitor_chroot_flow "PORTAGE"
else
	die "Part: Portage FAILED"
fi
_do_hs '\+gportage' "after" "Part: Portage"

# Part D Begins
_do_hs '\-grebuild' "before" "Part: System Rebuild"
_sreb() {
	echo -e "\e[35mPart D: Rebuilding system\e[0m"
	env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part D: Rebuilding system' ) $PS1"
	export PATH=${PATH}:${CHDIR}
	build_the_world
	_monitor_chroot_flow "REBUILD"
}

if ! [[ "${_flag_auto}" ]]; then
	if echo "${_lawful_args[@]}" | grep -q 'grebuild'; then
		_e_report_back "Rebuild: Lawful entry detected, proceeding..."
	else
		if [[ "$(awk -F '=' '/REBUILD/{ print $2 }' <"${CHDIR}/chsinprog")" == 0 || -n "${_flag_force_new}" ]] || echo "${_enforce_args[@]}" | grep -q 'grebuild'; then
			if echo "${_enforce_args[@]}" | grep -q 'grebuild'; then
				_e_report_back "System Rebuild: Force entry detected, forcing..."
			fi
				_sreb
		fi
	fi
fi
_do_hs '\+grebuild' "after" "Part: System Rebuild"

# PART E BEGINS
_do_hs '\-gconfigure' "before" "Part: System Configuration"
if _call_hook_points 'CONFIGURE' 'gconfigure' 'Part: System Configuration' 'configure_system_f' "$@"; then
	_monitor_chroot_flow "CONFIGURE"
else
	die "Part: System Configuration FAILED"
fi
_do_hs '\+gconfigure' "after" "Part: System Configuration"

# PART F BEGINS
_do_hs '\-ginst' "before" "Part: Emerge requested packages"
if _call_hook_points 'INSTALL' 'ginst' 'Part: Emerge requested packages' 'emerge_requested' "$@"; then
	_monitor_chroot_flow "INSTALL"
else
	die "Part: Emerge Requested Packages FAILED"
fi
unset YN
_do_hs '\+ginst' "after" "Part: Emerge requested packages"

# PART G BEGINS
_do_hs '\-grun' "before" "Part: Runlevel Configurations"
if _call_hook_points 'RUNLEVEL' 'grun' 'Part: Runlevel Configurations' '_runlevel_configuration' "$@"; then
	_monitor_chroot_flow "RUNLEVEL"
else
	die "Part: Runlevel Configurations FAILED"
fi
unset YN
_do_hs '\+grun' "after" "Part: Runlevel Configurations"

# PART H BEGINS
_do_hs '\-gkernel' "before" "Part: Kernel build"
if [[ -n "${_flag_kernel}" ]] || [[ -n "${_flag_minimal}" ]]; then
	:
else
	if _call_hook_points 'KERNEL' 'gkernel' 'Part: Kernel build' '_kernel_build'; then
		_monitor_chroot_flow "KERNEL"
	else
		die "Part: Kernel build FAILED"
	fi
	unset YN
fi
_do_hs '\+gkernel' "after" "Part: Kernel build"

# PART I BEGINS
_do_hs '\-ginitrd' "before" "Part: Initramfs build"
if [[ -n "${_flag_kernel}" ]] || [[ -n "${_flag_minimal}" ]] || [[ -n "${_flag_initrd}" ]]; then
	:
else
	if _call_hook_points 'INITRAMFS' 'ginitrd' 'Part: Initramfs build' '_initramfs_builder'; then
		_monitor_chroot_flow "INITRAMFS"
	else
		die "Part: Initramfs build FAILED"
	fi
	unset YN
fi
_do_hs '\+ginitrd' "after" "Part: Initramfs build"

# PART DESELECT BEGINS
_do_hs '\-gdes' "before" "Part: Deselect packages"
if _call_hook_points 'DESP' 'gdes' 'Part: Deselect packages' '_des_c' "$@"; then
	_monitor_chroot_flow "DESP"
else
	die "Part: Deselect packages FAILED"
fi
unset YN
_do_hs '\+gdes' "after" "Part: Deselect packages"

# Creating user-data dir-tree
mkdir -p /user-data/persistent/{etc,var,logs,config.d,local,rmount}
mkdir -p /user-data/persistent/local/{data,home,root,mnt,media}
mkdir -p /user-data/tmpfs/{tmp,etc,run,opt,var}
