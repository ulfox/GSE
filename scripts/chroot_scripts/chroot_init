#!/bin/bash

#
# THE MAIN CHROOT SCRIPT.
# ALL CONFIGURATIONS HAPPEN HERE OR ARE SOURCED FROM HERE
# PLEASE DO NOT MODIFY THIS FILE, BUT REFEREE AT CONFIGURATION SUBMENU
# IF YOU NEED TO ADD EXTRA FEATURES TO YOUR SYSTEM.
# 

LC_COLLATE="C"

source /etc/profile && export PS1="( 'Part C: Preparing to bootstrap' ) $PS1"
export CHDIR="/sinit.d"
export PATH=${PATH}:${CHDIR}
source "${CHDIR}/chinit.conf" || { chprint_inf 2; exit 1; }

# PART C BEGINS
if [[ "$(awk -F '=' '/WEBRSYNC/{ print $2 }' <"${CHDIR}/chsinprog")" == 0 ]]; then
clear; echo "Part C: Preparing to bootstrap"
# server_set_f "${SERVERS[@]}"
echo "Getting latest portage snapshot"
emerge-webrsync && chprint_inf 1 || { chprint_inf 2; exit 1; }
env-update > /dev/null 2>&1
chsinit_mon 1
fi

rm -f /etc/portage/make.conf
rm -r /etc/portage/package.use/sysbuild
cp "${CHDIR}/make.conf" /etc/portage/make.conf \
&& cp "${CHDIR}/sysbuild" /etc/portage/package.use/sysbuild

# SELECTING BASIC PROFILE
eselect profile set 1

if [[ "$(awk -F '=' '/CATALYST/{ print $2 }' < "${CHDIR}/tborigin")" == 0 ]]; then
# Part D Begins
if [[ "$(awk -F '=' '/REBUILD/{ print $2 }' <"${CHDIR}/chsinprog")" == 0 ]]; then
clear; echo "Part D: Rebuilding system"
env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part D: Rebuilding system' ) $PS1"
export PATH=${PATH}:${CHDIR}

# emerge -ev @world or emerge -vr
while true; do
	echo "Do you wish to rebuild the system?"
	echo "If catalyst built this system, simply say no"
	read -p "Answer Yes or No: " yn
	case $yn in
		[yY][eE][sS]|[yY])
			if [[ "$(awk -F '=' '/RESUMEREB/{ print $2 }' <"${CHDIR}/chsinprog")" == 1 ]]; then
			emerge -ev @world || { chsinit_mon 6; chprint_inf 2; exit 1; }
			else
			emerge -rv || { chsinit_mon 8; chprint_inf 2; exit 1; }
			fi
			chsinit_mon 3; break;;
		[nN][oO]|[nN])
			echo "Exiting Rebuilding Part"
			sleep 1
			chsinit_mon 6; break;;
	esac
done
fi
fi

# PART E BEGINS
if [[ "$(awk -F '=' '/CONFIGURE/{ print $2 }' <"${CHDIR}/chsinprog")" == 0 ]]; then
clear; echo "Part E: Configuring system"
env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part E: Configuring system' ) $PS1"
export PATH=${PATH}:${CHDIR}

# TIMEZONE CONFIGURATION
if [[ "${TIMEZONE}" != TMZ ]]; then
echo "${TIMEZONE}" > /etc/timezone && echo -e "[\e[32m*\e[0m] Configuring Timezone"
else
echo "UTC" > /etc/timezone && echo -e "[\e[32m*\e[0m] Configuring Timezone"
fi

if emerge --config sys-libs/timezone-data | grep "invalid"; then
echo "UTC" >/etc/timezone; emerge --config sys-libs/timezone-data \
&& echo -e "[\e[32m*\e[0m] Resetting to UTC" \
|| echo -e "[\e[31m*\e[0m] Resetting to UTC"
fi

# HOST CONFIGURATION
if [[ -z $(cat "${CHDIR}/locale.gen" | tail -n +22 | sed '/^#/ d' | sed '/^\s*$/d') ]]; then
sed -i '/en_US.UTF-8/d' /etc/locale.gen
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && echo -e "[\e[32m*\e[0m] Configuring locale" \
|| echo -e "[\e[31m*\e[0m] Configuring locale"
else
echo $(cat "${CHDIR}/locale.gen") > /etc/locale.gen
sed -i '/en_US.UTF-8/d' /etc/locale.gen
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && echo -e "[\e[32m*\e[0m] Configuring locale" \
|| echo -e "[\e[31m*\e[0m] Configuring locale"
fi

locale-gen
export LC_ALL="en_US.UTF-8"
SETLOC=$(eselect locale list | grep en_US | awk -F ' ' '{ print $1 }' \
| awk -F '[' '{ print $2 }' | awk -F ']' '{ print $1 }')

eselect locale set ${SETLOC} && echo -e "[\e[32m*\e[0m] Setting locale to en_US" \
|| echo -e "[\e[31m*\e[0m] Setting locale en_US"
unset SETLOC
chsinit_mon 4
fi

# GENERATING FSTAB
cat "${CHDIR}/fstab" > /etc/fstab && echo -e "[\e[32m*\e[0m] Creating fstab entries" \
|| echo -e "[\e[31m*\e[0m] Creating fstab entries"

{ while read -r i; do
	case $(echo $i | awk -F ' ' '{ print $1 }') in
		tmpfs)
			echo #>> /etc/fstab
			echo "# $(echo $i | awk -F ' ' '{ print $2 }')" >> /etc/fstab
			echo "tmpfs $(echo $i | awk -F ' ' '{ print $2 }') tmpfs nodev,nosuid,size=$(echo $i | awk -F ' ' '{ print $3 }')" >> /etc/fstab
			;;
		symlink)
			if [[ $(echo $i | awk -F ' ' '{ print $2 }') == 'f=n' ]]; then
				echo "ln -s $(echo $i | awk -F ' ' '{ print $3 }') $(echo $i | awk -F ' ' '{ print $4 }')"
			elif [[ $(echo $i | awk -F ' ' '{ print $2 }') == 'f=y' ]]; then
				mkdir -p $(echo $i | awk -F ' ' '{ print $3 }')
				echo "ln -s $(echo $i | awk -F ' ' '{ print $4 }') $(echo $i | awk -F ' ' '{ print $5 }')"
			fi
			;;
		bindmount)
			if [[ $(echo $i | awk -F ' ' '{ print $2 }') == 'f=n' ]]; then
				echo >> /etc/fstab
				echo "# bind mount: $(echo $i | awk -F ' ' '{ print $3 }')" >> /etc/fstab
				echo "$(echo $i | awk -F ' ' '{ print $3 }') $(echo $i | awk -F ' ' '{ print $4 }') none rw,bind 0 0" >> /etc/fstab
			elif [[ $(echo $i | awk -F ' ' '{ print $2 }') == 'f=y' ]]; then
				echo >> /etc/fstab
				echo "# bind mount: $(echo $i | awk -F ' ' '{ print $4 }')" >> /etc/fstab
				mkdir -p $(echo $i | awk -F ' ' '{ print $3 }')
				echo "$(echo $i | awk -F ' ' '{ print $4 }') $(echo $i | awk -F ' ' '{ print $5 }') none rw,bind 0 0" >> /etc/fstab
			fi
			;;
		overlay)
			echo >> /etc/fstab
			echo "# overlay: $(echo $i | awk -F ' ' '{ print $2 }')" >> /etc/fstab
			OVLFSLD=$(echo $i | awk -F ' ' '{ print $2 }')
			OVLFSUD=$(echo $i | awk -F ' ' '{ print $3 }')
			OVLFSWD=$(echo $i | awk -F ' ' '{ print $4 }')
			echo "overlay /merged overlay noauto,lowerdir=${OVLFSLD},uperdir=${OVLFSUD},workdir=${OVLFSWD} 0 0" >> /etc/fstab
			unset OVLFSLD
			unset OVLFSUD
			unset OVLFSWD
			;;
	esac
done < <(cat "${CHDIR}/system_links" | sed '/^#/ d' | sed '/^\s*$/d'); } && chprint_inf 1 || { chprint_inf 2; exit 1; } \
&& echo -e "[\e[32m*\e[0m] Creating system links and requested fstab entries" \
|| echo -e "[\e[31m*\e[0m] Creating system links and requested fstab entries"

if cp "${CHDIR}/hostname" /etc/conf.d/hostname; then
echo -e "[\e[32m*\e[0m] Configuring hostname"
else
echo -e "[\e[31m*\e[0m] Configuring hostname"
fi

if cp "${CHDIR}/net"  /etc/conf.d/net; then
echo -e "[\e[32m*\e[0m] Configuring /etc/conf.d/net"
else
echo -e "[\e[31m*\e[0m] Configuring /etc/conf.d/net"
fi

echo "Configuring /etc/ssh/sshd_config"
if cp "${CHDIR}/sshd"  /etc/ssh/sshd_config; then
echo -e "[\e[32m*\e[0m] Configuring /etc/ssh/sshd_config"
else
echo -e "[\e[31m*\e[0m] Configuring /etc/ssh/sshd_config"
fi

mkdir -p /root/.ssh
if cat "${CHDIR}/ssh.pub" | tail -n +4 > /root/.ssh/authorized_keys; then
echo -e "[\e[32m*\e[0m] Adding ssh.pub key to /root/.ssh/authorized_keys"
else
echo -e "[\e[31m*\e[0m] Adding ssh.pub key to /root/.ssh/authorized_keys"
fi

# PART F BEGINS
if [[ "$(awk -F '=' '/INSTALL/{ print $2 }' <"${CHDIR}/chsinprog")" == 0 ]]; then
# This list will change
clear; echo "Part F: Installing required packages"
env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part F: Installing required packages' ) $PS1"
export PATH=${PATH}:${CHDIR}

if [[ "$(awk -F '=' '/RESUMEINST/{ print $2 }' <"${CHDIR}/chsinprog")" == 1 ]]; then
emerge -v ${INS_PARTF} || { chsinit_mon 7; chprint_inf 2; exit 1; }
else
emerge -v "${INS_PARTF}" || { chsinit_mon 9; chprint_inf 2; exit 1; }
fi

echo "Emerging requested packages"
sleep 1
{ while read -r i; do
	emerge -v "$i"
done < <(cat "${CHDIR}/custom_pacl" | sed '/^#/ d' | sed '/^\s*$/d'); } \
&& { echo -e "[\e[32m*\e[0m] Emerged successfully"; sleep 2; } || chprint_inf 2

echo "Cleaning leftovers"
emerge --depclean

chsinit_mon 5
fi

# PART G BEGINS
if [[ "$(awk -F '=' '/RUNLEVEL/{ print $2 }' <"${CHDIR}/chsinprog")" == 0 ]]; then
clear; echo "Part G: Updating Runlevel Entries"
env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part G: Updating Runlevel Entries' ) $PS1"
export PATH=${PATH}:${CHDIR}
{ while read -r i; do
rc-update "$(echo $i | awk -F ' ' '{ print $2 }')" "$(echo $i | awk -F ' ' '{ print $1 }')" \
"$(echo $i | awk -F ' ' '{ print $3 }')"
sleep 0.5
done < <(cat "${CHDIR}/runlevels" | sed '/^#/ d' | sed '/^\s*$/d'); } \
&& { echo -e "[\e[32m*\e[0m] Updated successfully"; sleep 2; } || chprint_inf 2
chsinit_mon rn
fi

# PART H BEGINS
if [[ "$(awk -F '=' '/KERNEL/{ print $2 }' <"${CHDIR}/chsinprog")" == 0 ]]; then
clear; echo "Part H: Building the Kernel"
env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part H: Building the Kernel' ) $PS1"
export PATH=${PATH}:${CHDIR}
while true; do
	echo "Do you wish to configure the kernel?"
	echo "Please keep in mind that main function of the controller are related with kernel builtins"
	echo "Do not disable: items to be listed"
	read -p "Select an option Y/N: " SELCT
		case ${SELCT:-y} in
			[Yy][eE][sS]|[yY])
				if genkernel --install kernel --menuconfig --kernel-config="${CHDIR}/kernel-conf"; then
				echo "The built was successful"
				else
				chprint_inf 2; exit 1
				fi;;
			[nN][oO]|[nN])
				if genkernel --install kernel --kernel-config="${CHDIR}/kernel-conf"; then
				echo "The built was successful"
				else
				chprint_inf 2; exit 1
				fi;;
			*) echo "Wrong option";;
		esac
done
chsinit_mon kern
fi

# Creating user-data dir-tree
mkdir -p /user-data/persistent/{etc,var,logs,config.d,local,rmount}
mkdir -p /user-data/persistent/local/{data,home,root,mnt,media}
mkdir -p /user-data/tmpfs/{tmp,etc,run,opt,var}
