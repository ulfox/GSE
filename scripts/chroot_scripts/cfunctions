#!/bin/bash

# SUBSHELL
subshel_f() {
	echo -e "\e[33mCalling bash subshell\e[0m"
	sleep 2
	echo 'echo -e "\e[33mInside Subshell\e[0m"' >> /root/.bashrc
	echo 'echo -e "\e[33mExit to return back to parent\e[0m"' >> /root/.bashrc
	(clear; exec /bin/bash;)
	sed -i "/Inside Subshell/d" "/root/.bashrc"
	sed -i "/Exit to return back to parent/d" "/root/.bashrc"
	echo -e "\e[33mYou are back to parent\e[0m"
}

die() {
	echo "$@" 1>&2 ; exit 1
}

pass() {
	echo echo -e "[\e[34mDone\e[0m]"
}

write_fail() {
	echo "FAILED" >> "${CHDIR}/emergeresume"	
}

delete_fail() {
	sed -i "/FAILED/d" "${CHDIR}/emergeresume"
}

# ALL ERROR MESSAGES BUT FIRST
chprint_inf_f() {
	case $1 in
		1)
			echo -e "[\e[32m*\e[0m] \e[34mDone\e[0m";;
		2)
			echo -e "[\e[31m*\e[0m] \e[31mFAILED\e[0m";;
		3)
			clear
			echo "If this message is printed while using the Maim Menu"
			echo "That means essential files are altered or something bad is happening."
			echo
			echo "Please run a health-check from the ~Main Menu~ and a Version check first."
			echo "If you see this again after the health/version check, please submit a bug report"
			echo "and stop using the program, or data loss may occur."
			echo
			echo "Exiting..."
			sleep 2
			exit 1;;
		4)
			echo -e "[\e[31m*\e[0m] [\e[31mERROR\e[0m: Wrong parameters"
			exit 1;;
		5)
			echo -e "[\e[31m*\e[0m] Failed getting version";;
		6)
			echo -e "[\e[31m*\e[0m] FATAL";;
	esac
}

# PROCESS FLOW TWEAKER. DO NOT EDIT THIS.
chsinit_mon_f() {
	case "$1" in
		UPDATE)
			sed -i -e 's/UPDATE=0/UPDATE=1/g' "${CHDIR}/chsinprog";;
		2)
			sed -i -e 's/BOOTSTRAP=0/BOOTSTRAP=1/g' "${CHDIR}/chsinprog";;
		REBUILD)
			sed -i -e 's/REBUILD=0/REBUILD=1/g' "${CHDIR}/chsinprog";;
		CONFIGURE)
			sed -i -e 's/CONFIGURE=0/CONFIGURE=1/g' "${CHDIR}/chsinprog";;
		INSTALL)
			sed -i -e 's/INSTALL=0/INSTALL=1/g' "${CHDIR}/chsinprog";;
		RUNLEVEL)
			sed -i -e 's/RUNLEVEL=0/RUNLEVEL=1/g' "${CHDIR}/chsinprog";;
		KERNEL)
			sed -i -e 's/KERNEL=0/KERNEL=1/g' "${CHDIR}/chsinprog";;
		INITRAMFS)
			sed -i -e 's/INITRAMFS=0/INITRAMFS=1/g' "${CHDIR}/chsinprog";;
		PORTAGE)
			sed -i -e 's/PORTAGE=0/PORTAGE=1/g' "${CHDIR}/chsinprog";;
		CLEAN)
			sed -i -e 's/CLEAN=0/CLEAN=1/g' "${CHDIR}/chsinprog";;
		CHROOTPART)
			sed -i -e 's/CHROOTPART=0/CHROOTPART=1/g' "${CHDIR}/chsinprog";;
		dn) ;;
	esac
}

emerge_dep_clean_f() {
	# DEPCLEAN BEFORE APPLYING NEW PROFILE CHANGES
	echo -e "\e[34mOrphan depclean before continuing...\e[0m" \
	&& emerge --depclean >/dev/null 2>&1 \
	&& pass \
	|| { chprint_inf_f 2 \
	&& write_fail \
	&& chroot_master_loop "LOOPEMERGE"; }
}

dist_ccashe_f() {
	# ADD OR REMOVE DISTCC FROM THE SYSTEM
	if [[ -n "$(echo ${CHFEATURES} | grep distcc)" ]]; then
		if ! eix --installed sys-devel/distcc >/dev/null 2>&1; then
			echo -e "Configuring [\e[32mdistcc\e[0m]"
			if emerge -q sys-devel/distcc >/dev/null 2>&1; then
				pass
			else
				die # Call infinite loop check, or exit
			fi
			mkdir -p /etc/distcc \
			&& cp "${CHDIR}/hosts" /etc/distcc/hosts \
			&& echo -e "Configuring [\e[32mdistcc hosts\e[0m]" \
			|| echo -e "Faild configuring [\e[33mdistcc hosts\e[0m]"
		fi
	else
		if eix --installed sys-devel/distcc >/dev/null 2>&1; then
			echo -e "Removing [\e[32mdistcc\e[0m]" \
			&& emerge --deselect sys-devel/distcc >/dev/null 2>&1 \
			&& pass
		fi
	fi
	
	if [[ -n "${CCCACHESIZE}" ]]; then
		if ! eix --installed dev-util/ccache >/dev/null 2>&1; then
			echo -e "Configuring [\e[32mccache\e[0m]" \
			&& emerge -q dev-util/ccache >/dev/null 2>&1 \
			&& pass || die "Failed"
		fi
	else
		if eix --installed dev-util/ccache >/dev/null 2>&1; then
			echo -e "Removing [\e[33mccache\e[0m]" \
			&& emerge --deselect sys-devel/distcc >/dev/null 2>&1 \
			&& pass
		fi
	fi
}

port_prof_f() {
	# GSE PROFILE DIRECTORIES AND FILES
	if mkdir -p /usr/local/portage/{metadata,profiles}; then
		chown -R portage:portage /usr/local/portage || return 1
		echo 'gse' > /usr/local/portage/profiles/repo_name || return 1
		cp "${CHDIR}/localrepo/layout.conf" "/usr/local/portage/metadata/layout.conf" || return 1
		cp "${CHDIR}/localrepo/localrepo.conf" "/etc/portage/repos.conf/localrepo.conf" || return 1
		
		mkdir -p "/usr/local/portage/profiles/gse" \
		&& mkdir -p "/usr/local/portage/profiles/default/linux/${ARCH}/13.0/gse" \
		&& cp "${CHDIR}/profiles/parent-gse/eapi" \
		"/usr/local/portage/profiles/gse/eapi" \
		&& cp "${CHDIR}/profiles/parent-gse/make.defaults" \
		"/usr/local/portage/profiles/gse/make.defaults" \
		&& cp "${CHDIR}/profiles/parent-gse/package.use" \
		"/usr/local/portage/profiles/gse/package.use" \
		&& cp "${CHDIR}/profiles/parent-gse/package.use.force" \
		"/usr/local/portage/profiles/gse/package.use.force" \
		&& cp "${CHDIR}/profiles/child-gse/eapi" \
		"/usr/local/portage/profiles/default/linux/${ARCH}/13.0/gse/eapi" \
		&& cp "${CHDIR}/profiles/child-gse/parent" \
		"/usr/local/portage/profiles/default/linux/${ARCH}/13.0/gse/parent" \
		&& echo "# Local profile" > "/usr/local/portage/profiles/profiles.desc" \
		&& echo "amd64           default/linux/amd64/13.0/gse                            exp" \
		>> "/usr/local/portage/profiles/profiles.desc" \
		&& echo -e "[\e[32m*\e[0m] Creating [\e[34mprofile\e[0m]" \
		|| { echo -e "[\e[31m*\e[0m] Creating [\e[34profile\e[0m]"; return 1; }
	else
		echo -e "[\e[31m*\e[0m] Creating [\e[34profile\e[0m]"
		return 1
	fi
	# END OF GSE PROFILE
}

part_portage_f() {
	# MAKE.CONF, PACKAGE.USE, FEATURES AND CCACHE
	if rm -f /etc/portage/make.conf; then
		rm -r /etc/portage/package.use/sysbuild >/dev/null 2>&1
		mkdir -p "/etc/portage/package.use" || exit 1
		cp "${CHDIR}/make.conf" /etc/portage/make.conf || exit 1
		echo -e "Configuring [\e[32mmake.conf\e[0m]"
		if cp "${CHDIR}/package.use/sysbuild" "/etc/portage/package.use"; then
			echo -e "Configuring [\e[32mpackage.use\e[0m]"
			echo "FEATURES=\"\${FEATURES} ${CHFEATURES}\"" >> /etc/portage/make.conf
			echo -e "Configuring [\e[32mFEATURES\e[0m]"
			if [[ -n "${CCCACHESIZE}" ]]; then
				echo "CCACHE=\"${CCCACHESIZE}\"" >> /etc/portage/make.conf
				echo -e "Configuring make.conf [\e[32mCCACHE=${CCCACHESIZE}\e[0m]"
			fi

			dist_ccashe_f || return 1
			emerge_dep_clean_f "DEPC"
			port_prof_f || return 1
		else
			echo -e "\e[31mFaild\e[0m Configuring [\e[32mpackage.use\e[0m]"
			exit 1
		fi
	else
		echo -e "\e[31mFaild\e[0m Configuring [\e[32mmake.conf\e[0m]"
		exit 1
	fi

	if [[ -n $(echo "$@" | grep '\--force-new') ]]; then
		echo -e "\e[34Enabling basic profile\e[0m]"
		eselect profile set 1 && echo -e "\e[34mEnabled\e[0m" \
		|| { chprint_inf_f 2 && YN=n; }
	else
		# SELECTING PROFILE
		echo -e "Do you wish to enable \e[33mGSE\e[0m \e[34mprofile\e[0m ::: (\e[31mexperimental\e[0m)?"
		echo -e "Say no here, to select a basic \e[35mGentoo\e[0m \e[34mprofile\e[0m manually"
		echo "Answer Y/N: "
		read -rp "Input :: <= " YN
		while true; do
			case "${YN}" in
				[yY])
					GSE_PROF=$(eselect profile list | grep gse | awk -F '[' '{print $2}' | awk -F ']' '{print $1}') \
					&& eselect profile set "${GSE_PROF}" && echo -e "\e[34mEnabled\e[0m" && BREAKVAR=0 \
					|| { chprint_inf_f 2 && YN=n; };;
				[nN])
					eselect profile list
					echo -e "Please select a \e[34mprofile\e[0m listed from above:"
					echo -e "Answer is only related \e[34mprofile\e[0m numbers"
					read -rp "Input :: <= " ANS
					[[ -n "${ANS}" ]] && eselect profile set "${ANS}" && echo -e "\e[34mEnabled\e[0m" && BREAKVAR=0 \
					|| { chprint_inf_f 2 && BREAKVAR=1; };;
			esac
			if [[ "${BREAKVAR}" == 0 ]]; then
				break 
			else
				echo "Could not set a profile"
				YN=n
			fi
		done
	fi

	unset YN
	unset ANS
	unset BREAKVAR
}

apply_new_f() {
	# APPLYING PROFILE CHANGES
	echo -e "[\e[32m*\e[0m] \e[34mApplying new profile changes\e[0m"
	emerge -q --update --deep --newuse --with-bdeps=y @world \
	&& pass \
	|| { chprint_inf_f 2 && write_fail \
	&& chroot_master_loop "LOOPEMERGE"; }
}

emerge_rebuild_system_f() {
	# EMERGIN WORLD
	while true; do
		echo "----------------------------------------------------------------------------"
		echo "Do you wish to rebuild the system?"
		echo "If catalyst built this system, simply say no"
		echo "Answer Yes or No: "
		read -rp "Input :: <= " YN
		case "${YN:-n}" in
			[yY][eE][sS]|[yY])
				emerge -eq @world && pass \
				|| { chprint_inf_f 2 && write_fail \
				&& chroot_master_loop "LOOPEMERGE"; }
				chsinit_mon "REBUILD"; break;;
			[nN][oO]|[nN])
				echo "Exiting Rebuilding Part"
				sleep 1
				chsinit_mon "REBUILD"; break;;
		esac
	done
	unset YN
}


updating_portage_f(){
	if emerge -q --deep --update portage >/dev/null 2>&1; then
		pass
	else
		die "Failed"
	fi
}

emerge_eix_f() {
	if emerge -q app-portage/eix >/dev/null 2>&1; then
		pass
	else
		die "Failed"
	fi
}

update_eix_f() {
	if eix-update >/dev/null 2>&1; then
		pass \
		&& chsinit_mon_f "UPDATE"
	else
		die "Failed"
	fi
}

emerge_gentoolkit_f() {
	emerge -q app-portage/gentoolkit >/dev/null 2>&1
}


test_stage_f() {
	echo -e "\e[31m$1\e[0m"
}

upd_port_em_eix_f() {
	mkdir -p "/etc/portage/repos.conf"
	cp /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf

	if [[ -n $(echo "$@" | grep 'catalyst') ]]; then
		emerge --sync >/dev/nill 2>&1 && pass || die "Failed"
		env-update >/dev/null 2>&1
	elif [[ -n $(echo "$@" | grep 'precomp') ]]; then
		emerge--webrsync >/dev/nill 2>&1 && pass || die "Failed"
		env-update >/dev/null 2>&1
	fi

	echo -e "\e[34mUpdating Portage\e[0m"
	updating_portage_f
	echo -e "\e[34mSearching for eix\e[0m"
	if [[ -z $(command -v eix) ]]; then
		echo -e "\e[33mCould not locate eix\e[0m"
		echo -e "\e[34mEmerging eix\e[0m"
		emerge_eix_f
		echo -e "\e[34mUpdating eix database\e[0m"
		update_eix_f
	else
		echo -e "\e[33meix located\e[0m"
		echo -e "\e[34mUpdating eix database\e[0m"
		update_eix_f		
	fi
	if ! eix --installed app-portage/gentoolkit >/dev/null 2>&1; then
		echo -e "\e[34mEmerging app-portage/gentoolkit\e[0m"
		emerge_gentoolkit_f
		echo -e "\e[34mRunning\e[0m \e[35mGentoo's\e[0m e[34mReverse Dependency rebuilder\e[0m"
		revdep-rebuild
	else
		echo -e "\e[34mRunning \e[34mGentoo's\e[0m Reverse Dependency rebuilder\e[0m"
		revdep-rebuild
	fi
}

part_c_f() {
	echo "============================================================================"
	echo -e "\e[35mPart C: Syncing Portage\e[0m"
	echo "============================================================================"
	echo -e "\e[34mUpdating the database\e[0m"
	upd_port_em_eix_f "$@"
}

configure_timezone_f() {
	if [[ "${TIMEZONE}" != TMZ ]]; then
		echo "----------------------------------------------------------------------------"
		echo "${TIMEZONE}" > /etc/timezone && echo -e "[\e[32m*\e[0m] Configuring \e[34mTimezone\e[0m"
	else
		echo "----------------------------------------------------------------------------"
		echo "UTC" > /etc/timezone && echo -e "[\e[32m*\e[0m] \e[34mConfiguring Timezone\e[0m"
	fi

	if emerge --config sys-libs/timezone-data | grep "invalid" >/dev/null 2>&1; then
		echo "UTC" >/etc/timezone; emerge --config sys-libs/timezone-data \
		&& echo -e "[\e[32m*\e[0m] Resetting to UTC" \
		|| echo -e "[\e[31m*\e[0m] Resetting to UTC"
	fi
}

configure_locale_f() {
	if [[ -z $(cat "${CHDIR}/locale.gen" | sed '/^#/ d' | sed '/^\s*$/d') ]]; then
		sed -i '/en_US.UTF-8/d' /etc/locale.gen
		echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && echo -e "[\e[32m*\e[0m] Configuring [\e[34mlocale\e[0m]" \
		|| echo -e "[\e[31m*\e[0m] Configuring [\e[34mlocale\e[0m]"
	else
		echo "$(cat "${CHDIR}/locale.gen")" > /etc/locale.gen
		sed -i '/en_US.UTF-8/d' /etc/locale.gen
		echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && echo -e "[\e[32m*\e[0m] Configuring \e[34mlocale\e[0m" \
		|| echo -e "[\e[31m*\e[0m] Configuring [\e[34mlocale\e[0m]"
	fi

	locale-gen
	export LC_ALL="en_US.UTF-8"
	SETLOC=$(eselect locale list | grep en_US | awk -F ' ' '{ print $1 }' \
	| awk -F '[' '{ print $2 }' | awk -F ']' '{ print $1 }')

	eselect locale set "${SETLOC}" && echo -e "[\e[32m*\e[0m] Setting locale to [\e[34men_US\e[0m]" \
	|| echo -e "[\e[31m*\e[0m] Failed setting locale to [\e[34men_US\e[0m]"
	unset SETLOC
}

configure_fstab_f() {
	if cat "${CHDIR}/fstab" > /etc/fstab; then
		echo -e "[\e[32m*\e[0m] Creating [\e[34mfstab\e[0m] entries"
		if [[ -n $(cat "${CHDIR}/system_links" | sed '/^#/ d' | sed '/^\s*$/d') ]]; then
			BREAKVAR=0
			 while read -r i; do
				case $(echo "$i" | awk -F ' ' '{ print $1 }') in
					tmpfs)
						echo >> /etc/fstab || { BREAKVAR=1; break; }
						echo "# $(echo "$i" | awk -F ' ' '{ print $2 }')" >> /etc/fstab || { BREAKVAR=1; break; }
						echo "tmpfs $(echo "$i" | awk -F ' ' '{ print $2 }') tmpfs nodev,nosuid,size=$(echo "$i" \
						| awk -F ' ' '{ print $3 }')" >> /etc/fstab || { BREAKVAR=1; break; }
						echo >> /etc/fstab || { BREAKVAR=1; break; }
						;;
					symlink)
						if [[ $(echo "$i" | awk -F ' ' '{ print $2 }') == 'f=n' ]]; then
							echo "ln -s $(echo "$i" | awk -F ' ' '{ print $3 }') $(echo "$i" \
							| awk -F ' ' '{ print $4 }')" || { BREAKVAR=1; break; }
						elif [[ $(echo "$i" | awk -F ' ' '{ print $2 }') == 'f=y' ]]; then
							mkdir -p "$(echo "$i" | awk -F ' ' '{ print $3 }')" || { BREAKVAR=1; break; }
							echo "ln -s $(echo "$i" | awk -F ' ' '{ print $4 }') $(echo "$i" \
							| awk -F ' ' '{ print $5 }')" || { BREAKVAR=1; break; }
						fi
						;;
					bindmount)
						if [[ $(echo "$i" | awk -F ' ' '{ print $2 }') == 'f=n' ]]; then
							echo >> /etc/fstab || { BREAKVAR=1; break; }
							echo "# bind mount: $(echo "$i" | awk -F ' ' '{ print $3 }')" >> /etc/fstab || { BREAKVAR=1; break; }
							echo "$(echo "$i" | awk -F ' ' '{ print $3 }') $(echo "$i" \
							| awk -F ' ' '{ print $4 }') none rw,bind 0 0" >> /etc/fstab || { BREAKVAR=1; break; }
							echo >> /etc/fstab || { BREAKVAR=1; break; }
						elif [[ $(echo "$i" | awk -F ' ' '{ print $2 }') == 'f=y' ]]; then
							echo >> /etc/fstab || { BREAKVAR=1; break; }
							echo "# bind mount: $(echo "$i" | awk -F ' ' '{ print $4 }')" >> /etc/fstab || { BREAKVAR=1; break; }
							mkdir -p "$(echo "$i" | awk -F ' ' '{ print $3 }')" || { BREAKVAR=1; break; }
							echo "$(echo "$i" | awk -F ' ' '{ print $4 }') $(echo "$i" \
							| awk -F ' ' '{ print $5 }') none rw,bind 0 0" >> /etc/fstab || { BREAKVAR=1; break; }
							echo >> /etc/fstab || { BREAKVAR=1; break; }
						fi
						;;
					overlay)
						echo >> /etc/fstab || { BREAKVAR=1; break; }
						echo "# overlay: $(echo "$i" | awk -F ' ' '{ print $2 }')" >> /etc/fstab || { BREAKVAR=1; break; }
						OVLFSLD=$(echo "$i" | awk -F ' ' '{ print $2 }')
						OVLFSUD=$(echo "$i" | awk -F ' ' '{ print $3 }')
						OVLFSWD=$(echo "$i" | awk -F ' ' '{ print $4 }')
						echo "overlay /merged overlay noauto,lowerdir=${OVLFSLD},uperdir=${OVLFSUD},workdir=${OVLFSWD} 0 0" >> /etc/fstab \
						|| { BREAKVAR=1; break; }
						echo >> /etc/fstab || { BREAKVAR=1; break; }
						unset OVLFSLD
						unset OVLFSUD
						unset OVLFSWD
						;;
				esac
			done < <(cat "${CHDIR}/system_links" | sed '/^#/ d' | sed '/^\s*$/d') && pass || die "Failed"
			if [[ "${BREAKVAR}" == 0 ]]; then
				echo -e "[\e[32m*\e[0m] Creating \e[34msystem links\e[0m and requested \e[34mfstab\e[0m entries"
			else
				echo -e "[\e[31m*\e[0m] Creating \e[34msystem links\e[0m and requested \e[34mfstab\e[0m entries"
				echo "###################################" >> issues.info
				echo "Issue: System links $(date)" >> issues.info
				echo "Command: Could not get issued command" >> issues.info
				echo "Items --->" >> issues.info
				cat "${CHDIR}/system_links" >> issues.info
				echo "###################################" >> issues.info
				ask_for_shell
			fi
		fi
	else
		echo -e "[\e[31m*\e[0m] Creating [\e[34mfstab\e[0m] entries"
		echo "###################################" >> issues.info
		echo "Issue: fstab $(date)" >> issues.info
		echo "Command: cat ${CHDIR}/fstab > /etc/fstab" >> issues.info
		echo "Items --->" >> issues.info
		cat "${CHDIR}/fstab" >> issues.info
		echo "###################################" >> issues.info
		ask_for_shell
	fi
}

configure_cp_function_f() {
	[[ -n $(cat "${CHDIR}/$1" | sed '/^#/ d' | sed '/^\s*$/d') ]] \
	&& if cp "${CHDIR}/$1" /etc/conf.d/"$2"; then
		echo -e "[\e[32m*\e[0m] Configuring [\e[34m$3\e[0m]"
	else
		echo -e "[\e[31m*\e[0m] Configuring [\e[34m$3\e[0m]"
		echo "###################################" >> issues.info
		echo "Issue: $3 $(date)" >> issues.info
		echo "Command: ${CHDIR}/$1 /etc/conf.d/$2" >> issues.info
		echo "Items --->" >> issues.info
		cat /etc/conf.d/"$2" >> issues.info
		echo "###################################" >> issues.info
		ask_for_shell
	fi
}

configure_system_f() {
	echo "============================================================================"
	echo -e "\e[35mPart E: Configuring system\e[0m"
	echo "============================================================================"
	env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part E: Configuring system' ) $PS1"
	export PATH=${PATH}:${CHDIR}

	# TIMEZONE CONFIGURATION
	configure_timezone_f

	# LOCALE CONFIGURATION
	configure_locale_f

	# GENERATING FSTAB
	configure_fstab_f

	# CONFIGURE HOSTNAME
	configure_cp_function_f "hostname" "hostname" "hostname"

	# CONFIGURE /ETC/CONF.D/NET
	configure_cp_function_f "net" "net" "/etc/conf.d/net"

	# CONFIGURE /ETC/DEFAULT/GRUB
	configure_cp_function_f  "grub" "grub" "/etc/default/grub"

	### CUSTOM SCRIPTS ENTRIES WILL BE INCLUDED HERE

	### INSCRIPT ENTRIES WILL BE INCLUDED HERE

	# CONFIGURE SSHD
	configure_cp_function_f "sshd" "sshd" "/etc/ssh/sshd_config"

	# CONFIGURE SSH.PUB
	[[ -n $(cat "${CHDIR}/ssh.pub" | sed '/^#/ d' | sed '/^\s*$/d') ]] && mkdir -p /root/.ssh \
	&& if cat "${CHDIR}/ssh.pub" | sed '/^#/ d' | sed '/^\s*$/d' > /root/.ssh/authorized_keys; then
		echo -e "\e[33m----------------------------------------------------------------------------\e[0m"
		echo -e "[\e[32m*\e[0m] Adding ssh.pub key to [\e[34m/root/.ssh/authorized_keys\e[0m]"
		echo -e "\e[33m----------------------------------------------------------------------------\e[0m"
	else
		echo -e "\e[31m----------------------------------------------------------------------------\e[0m"
		echo -e "[\e[31m*\e[0m] Adding ssh.pub key to [\e[34m/root/.ssh/authorized_keys\e[0m]"
		echo -e "\e[31m----------------------------------------------------------------------------\e[0m"
		echo "###################################" >> issues.info
		echo "Issue: ssh.pub.key $(date)" >> issues.info
		echo "Command: cat ${CHDIR}/ssh.pub | sed '/^#/ d' | sed '/^\s*$/d' > /root/.ssh/authorized_keys" >> issues.info
		echo "Items --->" >> issues.info
		cat /etc/conf.d/"$2" >> issues.info
		echo "###################################" >> issues.info
		ask_for_shell
	fi
	chsinit_mon_f "CONFIGURE"
}

emerge_instp_f() {
	echo -e "\e[34mEmerging\e[0m..."
	if emerge -q --update --deep --with-bdeps=y ${INS_PARTF}; then
		pass
	else
		chprint_inf_f 2 && write_fail
		echo "###################################" >> issues.info
		echo "Issue: emerge request packages $(date)" >> issues.info
		echo "Command: emerge -q --update --deep --with-bdeps=y" >> issues.info
		echo "Items --->" >> issues.info
		echo "${INS_PARTF}" >> issues.info
		echo "###################################" >> issues.info
		chroot_master_loop "LOOPEMERGE"
	fi
}

emerge_custom_pacl_f() {
	mapfile -t CMPL < <(cat "${CHDIR}/custom_pacl" | sed '/^#/ d' | sed '/^\s*$/d')

	if emerge -q --deep --update "${CMPL[@]}"; then
		pass
	else
		chprint_inf_f 2 && write_fail
		echo "###################################" >> issues.info
		echo "Issue: emerge request packages $(date)" >> issues.info
		echo "Command: emerge -q --deep --update " >> issues.info
		echo "Items --->" >> issues.info
		echo "${CMPL[@]}" >> issues.info
		echo "###################################" >> issues.info
		chroot_master_loop "LOOPEMERGE"
	fi
}

inst_req_f() {
	echo
	echo "----------------------------------------------------------------------------"
	echo -e "\e[35mPart F: Installing required packages\e[0m"
	echo "----------------------------------------------------------------------------"
	env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part F: Installing required packages' ) $PS1"
	export PATH=${PATH}:${CHDIR}

	# EMERGE CHINIT.CONF DEFINED PACKAGES
	emerge_instp_f

	# EMERGE REQUESTED PACKAGES
	emerge_custom_pacl_f

	# DEPCLEAN
	emerge_dep_clean_f

	chsinit_mon_f "INSTALL"
}

kernel_conf_f() {
	echo
	echo "----------------------------------------------------------------------------"
	echo -e "\e[35mPart H: Building the Kernel\e[0m"
	echo "----------------------------------------------------------------------------"
	env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part H: Building the Kernel' ) $PS1"
	export PATH=${PATH}:${CHDIR}
	MKPS=$(grep MAKEOPTS "/etc/portage/make.conf" | sed '/^#/ d' | sed  -e "s_\"__g" | awk -F '-j' '{print $2}' | sed '/^\s*$/d')
	while true; do
		echo -e "Do you wish to configure the \e[34mkernel's\e[0m config file?"
		echo -e "Please keep in mind that main function of the controller are related with \e[34mkernel builtins\e[0m"
		echo -e "Select an option Y/N: "
		read -rp "Input :: <= " SELCT
			case ${SELCT} in
				[Yy][eE][sS]|[yY])
					if genkernel --install kernel --menuconfig --kernel-config="${CHDIR}/kernel-conf" \
						--makeopts="-j${MKPS}" --btrfs --postclear --e2fsprogs; then
						echo -e "The \e[34mkernel\e[0m built was \e[32msuccessful\e[0m"
						chsinit_mon_f "KERNEL"
					else
						echo "###################################" >> issues.info
						echo "Issue: Kernel $(date)" >> issues.info
						echo "Command: genkernel --install kernel --menuconfig --kernel-config=${CHDIR}/kernel-conf \
						--makeopts=-j${MKPS} --btrfs --postclear --e2fsprogs" >> issues.info
						echo "###################################" >> issues.info
						ask_for_shell
					fi
					break;;
				[nN][oO]|[nN])
					if genkernel --install kernel --kernel-config="${CHDIR}/kernel-conf" \
						--makeopts="-j${MKPS}" --btrfs --postclear --e2fsprogs; then
						echo -e "The \e[34mkernel\e[0m built was \e[32msuccessful\e[0m"
						chsinit_mon_f "KERNEL"
					else
						echo "###################################" >> issues.info
						echo "Issue: Kernel $(date)" >> issues.info
						echo "Command: genkernel --install kernel --kernel-config=${CHDIR}/kernel-conf \
						--makeopts=-j${MKPS} --btrfs --postclear --e2fsprogs" >> issues.info
						echo "###################################" >> issues.info
						ask_for_shell
					fi
					break;;
				*) echo "Wrong option";;
			esac
	done
}

initramfs_f() {
	echo
	echo "----------------------------------------------------------------------------"
	echo -e "\e[35mPart I: Building the Initramfs\e[0m"
	echo "----------------------------------------------------------------------------"
	env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part H: Building the Initramfs' ) $PS1"
	export PATH=${PATH}:${CHDIR}
	if dracut -f "initramfs-controller-${ARCH}-${GSEVER}"; then
		echo "The \e[34minitramfs\e[0m built was successful"
		chsinit_mon_f "INITRAMFS"
	else
		echo "###################################" >> issues.info
		echo "Issue: Initramfs $(date)" >> issues.info
		echo "Command: dracut -f initramfs-controller-${ARCH}-${GSEVER}" >> issues.info
		echo "###################################" >> issues.info
		ask_for_shell
	fi
}

runlevel_f() {
	echo
	echo "----------------------------------------------------------------------------"
	echo -e "\e[35mPart G: Updating Runlevel Entries\e[0m"
	echo "----------------------------------------------------------------------------"
	env-update > /dev/null 2>&1 && source /etc/profile && export PS1="( 'Part G: Updating Runlevel Entries' ) $PS1"
	export PATH=${PATH}:${CHDIR}
	{ while read -r i; do
		rc-update "$(echo "$i" | awk -F ' ' '{ print $2 }')" "$(echo $i | awk -F ' ' '{ print $1 }')" \
		"$(echo "$i" | awk -F ' ' '{ print $3 }')"
		sleep 0.5
	done < <(cat "${CHDIR}/runlevels" | sed '/^#/ d' | sed '/^\s*$/d'); } \
	&& { echo -e "[\e[32m*\e[0m] Updated successfully" && chsinit_mon_f "RUNLEVEL"; } \
	|| { echo "###################################" >> issues.info
	echo "Issue: Runlevels $(date)" >> issue.info
	echo "Command: rc-update \$(echo \$i | awk -F ' ' '{ print \$2 }') \$(echo \$i | awk -F ' ' '{ print \$1 }') \
		\$(echo \$i | awk -F ' ' '{ print \$3 }')" >> issues.info
	echo "Items --->" >> issues.info
	cat "${CHDIR}/runlevels" >> issues.info
	echo "###################################" >> issues.info
	ask_for_shell; }
}

rep_resume_f() {
	echo -e "\e[33mResuming\e[0m"
	emerge -qr \
	&& return 0 || return 1
}

loop_resume(){
	if rep_resume_f; then
		pass \
		&& delete_fail \
		&& return 0
	else
		return 1
	fi
}

ask_for_shell() {
	while true; do
		chprint_inf_f 2
		echo "Do you wish to call shell function and fix the issues manually?"
		echo "An issues.info file will be created in the current directory"
		echo "The above file will contain the instruction that gse attempted to execute"
		echo "Answer Y/N "
		read -rp "Input :: <= " YN
		case "$YN" in
			[yY])
				chroot_master_loop "SHELL"
				break;;
			[nN])
				break;;
		esac
	done		
}

emerge_master_loop() {
	if [[ -n "$(grep "FAILED" <"${CHDIR}/emergeresume")" ]]; then
		while true; do
			echo -e "\e[33mA previous emerge action could not be completed or stopped manually\e[0m"
			echo -e "Do you wish to \e[35mresume\e[0m that action?"
			echo -e "Answer: \e[35mRESUME\e[0m/\e[33mSHELL\e[0m/\e[34mCONTINUE\e[0m/\e[31mEXIT\e[0m"
			read -rp "Input :: <= " YN
			case "${YN}" in
				RESUME)
					if loop_resume; then
						LOOPVAR="PASS"
					else
						LOOPVAR="LOOPEMERGE"
					fi
					break;;
				SHELL)
					while true; do
						subshel_f
						echo "If you fixed the issue, say CONTINUE to attempt an emerge resume"
						echo "You can answer SHELL to open shell again, or call die with EXIT"
						echo "Answer: CONTINUE/SHELL/EXIT: "
						read -rp "Input :: <= " AANS
						case "${AANS:-n}" in
							[yY])
								break;;
							[nN])
								;;
							EXIT)
								die "Exit Requested";;
						esac
					done
					if loop_resume; then
						LOOPVAR="PASS"
					else
						LOOPVAR="LOOPEMERGE"
					fi
					break;;
				CONTINUE)
						LOOPVAR="PASS"
						break;;
				EXIT)
					die "Exit Requested";;
			esac
		done
	fi
	unset YN
	unset AANS
	unset ANS
}

subshell_loop() {
	while true; do
		subshel_f
		echo "If you fixed the issue, say CONTINUE proceed"
		echo "You can answer SHELL to open shell again, or call die with EXIT"
		echo "Resume? CONTINUE/SHELL/EXIT: "
		read -rp "Input :: <= " AANS
		case "${AANS:-n}" in
			CONTINUE)
				LOOPVAR="PASS"
				break;;
			SHELL)
				LOOPVAR="SHELL"
				;;
			EXIT)
				die "Exit Requested";;
		esac
	done
}

chroot_master_loop() {
	[[ -z $(echo "$@") ]] && chprint_inf_f 3
	LOOPVAR="$1"
	while true; do
		case "${LOOPVAR}" in
			PASS)
				break;;
			LOOPEMERGE)
				emerge_master_loop;;
			SHELL)
				subshell_loop;;
				
		esac
	done
}

repeat_part_f() {
while true; do
	echo -e "\e[33mPart $1: Has been completed\e[0m"
	echo -e "\e[33mRun again? Y/N: \e[0m"
	read -rp "Input :: <= " YN
	case "${YN}" in
		[yN])
			clear; return 0
			break;;
		[nN])
			return 1
			break;;
	esac
done
}